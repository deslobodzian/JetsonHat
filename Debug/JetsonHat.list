
JetsonHat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056fc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e4  080058e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080058e4  080058e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058e4  080058e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  2000000c  080058f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  080058f8  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173d5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003445  00000000  00000000  00037411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0003a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022118  00000000  00000000  0003ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017760  00000000  00000000  0005edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7d7d  00000000  00000000  00076528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e2a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ebc  00000000  00000000  0014e2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080058bc 	.word	0x080058bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080058bc 	.word	0x080058bc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <HAL_TIM_IC_CaptureCallback>:

#include "callbacks.h"

uint8_t recv = 1;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	if (encoder_1.htim_abs->Instance == htim->Instance) {
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d13d      	bne.n	8000ae6 <HAL_TIM_IC_CaptureCallback+0x92>
		encoder_1.cl = HAL_TIM_ReadCapturedValue(encoder_1.htim_abs, TIM_CHANNEL_1);
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 fa27 	bl	8004ec4 <HAL_TIM_ReadCapturedValue>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000a7a:	60d3      	str	r3, [r2, #12]
		encoder_1.ch = HAL_TIM_ReadCapturedValue(encoder_1.htim_abs, TIM_CHANNEL_2);
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2104      	movs	r1, #4
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fa1e 	bl	8004ec4 <HAL_TIM_ReadCapturedValue>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000a8c:	6113      	str	r3, [r2, #16]

		encoder_1.frequency = (float)(ENCODER_1_TIMER_CLOCK_FREQ) / (encoder_1.cl + 1);
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a9c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000af4 <HAL_TIM_IC_CaptureCallback+0xa0>
 8000aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000aa6:	edc3 7a05 	vstr	s15, [r3, #20]
		encoder_1.raw_duty_cycle = (float) 100 * encoder_1.ch / encoder_1.cl;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	ee07 3a90 	vmov	s15, r3
 8000ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000af8 <HAL_TIM_IC_CaptureCallback+0xa4>
 8000aba:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ad0:	edc3 7a06 	vstr	s15, [r3, #24]
		Encoder_CalculateAbsolutePosition(&encoder_1);
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ad6:	f000 f89b 	bl	8000c10 <Encoder_CalculateAbsolutePosition>
		Encoder_SampleQuadraturePosition(&encoder_1);
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000adc:	f000 f87b 	bl	8000bd6 <Encoder_SampleQuadraturePosition>
		Encoder_CalculateQuadraturePosition(&encoder_1);
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000ae2:	f000 f8dd 	bl	8000ca0 <Encoder_CalculateQuadraturePosition>
	}
//	if (encoder_1.htim_quad->Instance = htim->Instance) {
//	}
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000028 	.word	0x20000028
 8000af4:	4d221fe8 	.word	0x4d221fe8
 8000af8:	42c80000 	.word	0x42c80000

08000afc <HAL_GPIO_EXTI_Callback>:

/* The current way the this will work is a default message will be sent each transaction depending on the address.
 * If the address is changed the next message sent will contain the wanted data unless a new address. */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	80fb      	strh	r3, [r7, #6]
	if (jetson.cs_pin == GPIO_pin) {
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b08:	889b      	ldrh	r3, [r3, #4]
 8000b0a:	88fa      	ldrh	r2, [r7, #6]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d103      	bne.n	8000b18 <HAL_GPIO_EXTI_Callback+0x1c>
		Jetson_SendSensorData(&jetson, &sensors);
 8000b10:	4904      	ldr	r1, [pc, #16]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b14:	f000 fa65 	bl	8000fe2 <Jetson_SendSensorData>
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000068 	.word	0x20000068
 8000b24:	200000b0 	.word	0x200000b0

08000b28 <Encoder_Init>:
 *      Author: deslo
 */

#include "encoder.h"

void Encoder_Init(Encoder_Struct *encoder, TIM_HandleTypeDef *htim_quad, TIM_HandleTypeDef *htim_abs, Encoder_Config *encoder_cfg) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
	encoder->htim_quad = htim_quad;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	601a      	str	r2, [r3, #0]
	encoder->htim_abs = htim_abs;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	605a      	str	r2, [r3, #4]

	encoder->cl = 0;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
	encoder->ch = 0;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]

	encoder->frequency = 0;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
	encoder->raw_duty_cycle = 0;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f04f 0200 	mov.w	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
	encoder->raw_quadrature = 0;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2200      	movs	r2, #0
 8000b62:	839a      	strh	r2, [r3, #28]
	encoder->quad_prev_value = 0;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
	encoder->quadrature_signed = 0;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24

	encoder->rotation_counts = 0;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
	encoder->rotation_revolutions = 0;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder->quadrature_radians = 0;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f04f 0200 	mov.w	r2, #0
 8000b86:	631a      	str	r2, [r3, #48]	; 0x30

	encoder->absolute_position_radians = 0;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f04f 0200 	mov.w	r2, #0
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34

	encoder->cfg = encoder_cfg;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	609a      	str	r2, [r3, #8]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <Encoder_Start>:

void Encoder_Start(Encoder_Struct *encoder) {
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	/* Start the Quadrature Encoder Timer */
	HAL_TIM_Encoder_Start(encoder->htim_quad, TIM_CHANNEL_ALL);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	213c      	movs	r1, #60	; 0x3c
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fe9b 	bl	80048ec <HAL_TIM_Encoder_Start>
	/* Start the Duty Cycle Encoder Timer */
	HAL_TIM_IC_Start_IT(encoder->htim_abs, TIM_CHANNEL_1); // primary channel - rising edge
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fc9f 	bl	8004500 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(encoder->htim_abs, TIM_CHANNEL_2); // secondary channel - falling edge
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fb95 	bl	80042f8 <HAL_TIM_IC_Start>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <Encoder_SampleQuadraturePosition>:
void Encoder_Reset(Encoder_Struct *encoder) {
	encoder->raw_duty_cycle = 0;
	encoder->raw_quadrature = 0;
}

void Encoder_SampleQuadraturePosition(Encoder_Struct *encoder) {
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	encoder->raw_quadrature = __HAL_TIM_GET_COUNTER(encoder->htim_quad);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	839a      	strh	r2, [r3, #28]
	encoder->quadrature_signed = unwrap_encoder(encoder->raw_quadrature, &encoder->quad_prev_value);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	8b9a      	ldrh	r2, [r3, #28]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3320      	adds	r3, #32
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	f000 f9ac 	bl	8000f54 <unwrap_encoder>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	0000      	movs	r0, r0
 8000c0c:	0000      	movs	r0, r0
	...

08000c10 <Encoder_CalculateAbsolutePosition>:

void Encoder_CalculateAbsolutePosition(Encoder_Struct *encoder) {
 8000c10:	b5b0      	push	{r4, r5, r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	float duty_cycle_time = 1.0f + ((encoder->cfg->maximum_pulse * encoder->raw_duty_cycle) / 100.0f);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	889b      	ldrh	r3, [r3, #4]
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c30:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000c98 <Encoder_CalculateAbsolutePosition+0x88>
 8000c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c40:	edc7 7a03 	vstr	s15, [r7, #12]
	encoder->absolute_position_radians = (2.0f * M_PI * duty_cycle_time) / encoder->cfg->output_period;
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff fc4b 	bl	80004e0 <__aeabi_f2d>
 8000c4a:	a311      	add	r3, pc, #68	; (adr r3, 8000c90 <Encoder_CalculateAbsolutePosition+0x80>)
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	f7ff fc9e 	bl	8000590 <__aeabi_dmul>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	4614      	mov	r4, r2
 8000c5a:	461d      	mov	r5, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	88db      	ldrh	r3, [r3, #6]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fc2a 	bl	80004bc <__aeabi_i2d>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	f7ff fdb8 	bl	80007e4 <__aeabi_ddiv>
 8000c74:	4602      	mov	r2, r0
 8000c76:	460b      	mov	r3, r1
 8000c78:	4610      	mov	r0, r2
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f7ff fe9a 	bl	80009b4 <__aeabi_d2f>
 8000c80:	4602      	mov	r2, r0
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	54442d18 	.word	0x54442d18
 8000c94:	401921fb 	.word	0x401921fb
 8000c98:	42c80000 	.word	0x42c80000
 8000c9c:	00000000 	.word	0x00000000

08000ca0 <Encoder_CalculateQuadraturePosition>:
void Encoder_CalculateQuadraturePosition(Encoder_Struct *encoder) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	encoder->rotation_revolutions = (float)encoder->quadrature_signed / (float)encoder->cfg->counts_per_revolution;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	encoder->quadrature_radians = encoder->rotation_revolutions * 2.0f * M_PI;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000cd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cd6:	ee17 0a90 	vmov	r0, s15
 8000cda:	f7ff fc01 	bl	80004e0 <__aeabi_f2d>
 8000cde:	a30a      	add	r3, pc, #40	; (adr r3, 8000d08 <Encoder_CalculateQuadraturePosition+0x68>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fc54 	bl	8000590 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f7ff fe60 	bl	80009b4 <__aeabi_d2f>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	f3af 8000 	nop.w
 8000d08:	54442d18 	.word	0x54442d18
 8000d0c:	400921fb 	.word	0x400921fb

08000d10 <Encoder_EncodePosition>:

/* encode absolute position first, then the quadrature position */
void Encoder_EncodePosition(Encoder_Struct *encoder, uint8_t *data_buf, uint8_t data_position) {
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
	uint32_t* ptr1 = (uint32_t*)&encoder->absolute_position_radians;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3334      	adds	r3, #52	; 0x34
 8000d22:	617b      	str	r3, [r7, #20]
	uint32_t* ptr2 = (uint32_t*)&encoder->quadrature_radians;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3330      	adds	r3, #48	; 0x30
 8000d28:	613b      	str	r3, [r7, #16]

	// Encode float1 into spiBuffer
	data_buf[data_position] = (uint8_t)(*ptr1 >> 24);
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	0e19      	lsrs	r1, r3, #24
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	4413      	add	r3, r2
 8000d36:	b2ca      	uxtb	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
	data_buf[data_position + 1] = (uint8_t)(*ptr1 >> 16);
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	0c19      	lsrs	r1, r3, #16
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	3301      	adds	r3, #1
 8000d44:	68ba      	ldr	r2, [r7, #8]
 8000d46:	4413      	add	r3, r2
 8000d48:	b2ca      	uxtb	r2, r1
 8000d4a:	701a      	strb	r2, [r3, #0]
	data_buf[data_position + 2] = (uint8_t)(*ptr1 >> 8);
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	0a19      	lsrs	r1, r3, #8
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	3302      	adds	r3, #2
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2ca      	uxtb	r2, r1
 8000d5c:	701a      	strb	r2, [r3, #0]
	data_buf[data_position + 3] = (uint8_t)(*ptr1);
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	6819      	ldr	r1, [r3, #0]
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	3303      	adds	r3, #3
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2ca      	uxtb	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]

	// Encode float2 into spiBuffer
	data_buf[data_position + 4] = (uint8_t)(*ptr2 >> 24);
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	0e19      	lsrs	r1, r3, #24
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	3304      	adds	r3, #4
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b2ca      	uxtb	r2, r1
 8000d7e:	701a      	strb	r2, [r3, #0]
	data_buf[data_position + 5] = (uint8_t)(*ptr2 >> 16);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	0c19      	lsrs	r1, r3, #16
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	3305      	adds	r3, #5
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
	data_buf[data_position + 6] = (uint8_t)(*ptr2 >> 8);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	0a19      	lsrs	r1, r3, #8
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	3306      	adds	r3, #6
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	4413      	add	r3, r2
 8000da0:	b2ca      	uxtb	r2, r1
 8000da2:	701a      	strb	r2, [r3, #0]
	data_buf[data_position + 7] = (uint8_t)(*ptr2);
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	3307      	adds	r3, #7
 8000dac:	68ba      	ldr	r2, [r7, #8]
 8000dae:	4413      	add	r3, r2
 8000db0:	b2ca      	uxtb	r2, r1
 8000db2:	701a      	strb	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	371c      	adds	r7, #28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd6:	4b5a      	ldr	r3, [pc, #360]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a59      	ldr	r2, [pc, #356]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000ddc:	f043 0320 	orr.w	r3, r3, #32
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b57      	ldr	r3, [pc, #348]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0320 	and.w	r3, r3, #32
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dee:	4b54      	ldr	r3, [pc, #336]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a53      	ldr	r2, [pc, #332]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b4e      	ldr	r3, [pc, #312]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a4d      	ldr	r2, [pc, #308]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a47      	ldr	r2, [pc, #284]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a41      	ldr	r2, [pc, #260]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	4a3b      	ldr	r2, [pc, #236]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e54:	f043 0308 	orr.w	r3, r3, #8
 8000e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5a:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <MX_GPIO_Init+0x180>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NCS_GYRO_Pin|NCS_ACCEL_Pin|TEST_LED_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f001 fd18 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NCS_MAG_GPIO_Port, NCS_MAG_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2104      	movs	r1, #4
 8000e78:	4832      	ldr	r0, [pc, #200]	; (8000f44 <MX_GPIO_Init+0x184>)
 8000e7a:	f001 fd13 	bl	80028a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	482c      	ldr	r0, [pc, #176]	; (8000f48 <MX_GPIO_Init+0x188>)
 8000e96:	f001 fb83 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NCS_GYRO_Pin|NCS_ACCEL_Pin|TEST_LED_Pin;
 8000e9a:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f001 fb73 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT_ACCEL_Pin|INT_MAG_Pin;
 8000eba:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481e      	ldr	r0, [pc, #120]	; (8000f4c <MX_GPIO_Init+0x18c>)
 8000ed2:	f001 fb65 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NCS_JETSON_Pin|DRDY_MAG_Pin;
 8000ed6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000edc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <MX_GPIO_Init+0x190>)
 8000eee:	f001 fb57 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NCS_MAG_Pin;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NCS_MAG_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	480e      	ldr	r0, [pc, #56]	; (8000f44 <MX_GPIO_Init+0x184>)
 8000f0a:	f001 fb49 	bl	80025a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8000f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	480b      	ldr	r0, [pc, #44]	; (8000f50 <MX_GPIO_Init+0x190>)
 8000f24:	f001 fb3c 	bl	80025a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2017      	movs	r0, #23
 8000f2e:	f001 fa4a 	bl	80023c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f32:	2017      	movs	r0, #23
 8000f34:	f001 fa61 	bl	80023fa <HAL_NVIC_EnableIRQ>

}
 8000f38:	bf00      	nop
 8000f3a:	3730      	adds	r7, #48	; 0x30
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48000c00 	.word	0x48000c00
 8000f48:	48001800 	.word	0x48001800
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000400 	.word	0x48000400

08000f54 <unwrap_encoder>:
 */

#include "helpers.h"


int32_t unwrap_encoder(uint16_t encoder_value, int32_t *prev_value) {
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	80fb      	strh	r3, [r7, #6]
    const uint16_t half_period = UINT16_MAX / 2;
 8000f60:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000f64:	827b      	strh	r3, [r7, #18]

    int32_t current_value = encoder_value;
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	60fb      	str	r3, [r7, #12]

    // Calculate the difference between the current and previous values
    int32_t difference = current_value - *prev_value;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]

    // Handle wrap-around cases
    if (difference > half_period) {
 8000f74:	8a7b      	ldrh	r3, [r7, #18]
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd05      	ble.n	8000f88 <unwrap_encoder+0x34>
        difference -= UINT16_MAX;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000f82:	3bff      	subs	r3, #255	; 0xff
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e009      	b.n	8000f9c <unwrap_encoder+0x48>
    } else if (difference < -half_period) {
 8000f88:	8a7b      	ldrh	r3, [r7, #18]
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	da04      	bge.n	8000f9c <unwrap_encoder+0x48>
        difference += UINT16_MAX;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f98:	33ff      	adds	r3, #255	; 0xff
 8000f9a:	617b      	str	r3, [r7, #20]
    }

    // Update the previous value
    *prev_value += difference;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	441a      	add	r2, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	601a      	str	r2, [r3, #0]

    // Adjust the unwrapped encoder value
    int32_t unwrapped_value = *prev_value;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60bb      	str	r3, [r7, #8]

    return unwrapped_value;
 8000fae:	68bb      	ldr	r3, [r7, #8]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <Jetson_Init>:
 *      Author: deslo
 */

#include "jetson.h"

void Jetson_Init(Jetson_Struct *jetson, SPI_HandleTypeDef *hspi, uint16_t cs_pin) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	80fb      	strh	r3, [r7, #6]
	jetson->hspi = hspi;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	601a      	str	r2, [r3, #0]
	jetson->cs_pin = cs_pin;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	809a      	strh	r2, [r3, #4]
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <Jetson_SendSensorData>:

uint8_t Jetson_SendSensorData(Jetson_Struct *jetson, Sensors_Struct *sensors) {
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
	Sensors_GenerateMessage(sensors, &jetson->txBuf);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3306      	adds	r3, #6
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6838      	ldr	r0, [r7, #0]
 8000ff4:	f000 f8b8 	bl	8001168 <Sensors_GenerateMessage>
//	while(HAL_SPI_GetState(jetson->hspi) != HAL_SPI_STATE_READY);
	return (HAL_SPI_Transmit_DMA(jetson->hspi, &jetson->txBuf, SENSORS_MESSAGE_LENGTH) == HAL_OK);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3306      	adds	r3, #6
 8001000:	2220      	movs	r2, #32
 8001002:	4619      	mov	r1, r3
 8001004:	f002 fe28 	bl	8003c58 <HAL_SPI_Transmit_DMA>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	bf0c      	ite	eq
 800100e:	2301      	moveq	r3, #1
 8001010:	2300      	movne	r3, #0
 8001012:	b2db      	uxtb	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	encoder_cfg.counts_per_revolution = 8192;
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <main+0x90>)
 8001022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001026:	601a      	str	r2, [r3, #0]
	encoder_cfg.maximum_pulse = 1024;
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <main+0x90>)
 800102a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800102e:	809a      	strh	r2, [r3, #4]
	encoder_cfg.output_period = 1025;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <main+0x90>)
 8001032:	f240 4201 	movw	r2, #1025	; 0x401
 8001036:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f001 f879 	bl	800212e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f844 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f7ff febe 	bl	8000dc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001044:	f000 f8b6 	bl	80011b4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001048:	f000 f8ee 	bl	8001228 <MX_SPI2_Init>
  MX_SPI3_Init();
 800104c:	f000 f92a 	bl	80012a4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001050:	f000 faa6 	bl	80015a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001054:	f000 fafe 	bl	8001654 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001058:	f000 fb50 	bl	80016fc <MX_TIM3_Init>
  MX_TIM4_Init();
 800105c:	f000 fba4 	bl	80017a8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001060:	f000 fbf8 	bl	8001854 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001064:	f000 fc78 	bl	8001958 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001068:	f000 fcfc 	bl	8001a64 <MX_TIM15_Init>
  MX_TIM20_Init();
 800106c:	f000 fd7e 	bl	8001b6c <MX_TIM20_Init>
  MX_USB_PCD_Init();
 8001070:	f000 ffd8 	bl	8002024 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  Encoder_Init(&encoder_1, &htim3, &htim5, &encoder_cfg);
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <main+0x90>)
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <main+0x94>)
 8001078:	490e      	ldr	r1, [pc, #56]	; (80010b4 <main+0x98>)
 800107a:	480f      	ldr	r0, [pc, #60]	; (80010b8 <main+0x9c>)
 800107c:	f7ff fd54 	bl	8000b28 <Encoder_Init>
  sensors.encoder_1 = &encoder_1;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <main+0xa0>)
 8001082:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <main+0x9c>)
 8001084:	601a      	str	r2, [r3, #0]
  sensors.encoder_2 = &encoder_1;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <main+0xa0>)
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <main+0x9c>)
 800108a:	605a      	str	r2, [r3, #4]
  sensors.encoder_3 = &encoder_1;
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <main+0xa0>)
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <main+0x9c>)
 8001090:	609a      	str	r2, [r3, #8]
  sensors.encoder_4 = &encoder_1;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <main+0xa0>)
 8001094:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <main+0x9c>)
 8001096:	60da      	str	r2, [r3, #12]
  Encoder_Start(&encoder_1);
 8001098:	4807      	ldr	r0, [pc, #28]	; (80010b8 <main+0x9c>)
 800109a:	f7ff fd82 	bl	8000ba2 <Encoder_Start>
  Jetson_Init(&jetson, &hspi2, NCS_JETSON_Pin);
 800109e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a2:	4907      	ldr	r1, [pc, #28]	; (80010c0 <main+0xa4>)
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <main+0xa8>)
 80010a6:	f7ff ff89 	bl	8000fbc <Jetson_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <main+0x8e>
 80010ac:	20000060 	.word	0x20000060
 80010b0:	2000031c 	.word	0x2000031c
 80010b4:	20000284 	.word	0x20000284
 80010b8:	20000028 	.word	0x20000028
 80010bc:	200000b0 	.word	0x200000b0
 80010c0:	20000124 	.word	0x20000124
 80010c4:	20000068 	.word	0x20000068

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	2238      	movs	r2, #56	; 0x38
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 fbe8 	bl	80058ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f001 fd1a 	bl	8002b24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010f0:	2321      	movs	r3, #33	; 0x21
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010fa:	2301      	movs	r3, #1
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	2303      	movs	r3, #3
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001106:	2306      	movs	r3, #6
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800110a:	2355      	movs	r3, #85	; 0x55
 800110c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001112:	2304      	movs	r3, #4
 8001114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fda4 	bl	8002c6c <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800112a:	f000 f818 	bl	800115e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2303      	movs	r3, #3
 8001134:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	2104      	movs	r1, #4
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f8a8 	bl	800329c <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001152:	f000 f804 	bl	800115e <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	; 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001162:	b672      	cpsid	i
}
 8001164:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	e7fe      	b.n	8001166 <Error_Handler+0x8>

08001168 <Sensors_GenerateMessage>:

#include "sensors.h"


/* only have one encode for now, so the message will be all encoder 1 */
void Sensors_GenerateMessage(Sensors_Struct *sensors, uint8_t *data_buf) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	Encoder_EncodePosition(sensors->encoder_1, data_buf, 0);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2200      	movs	r2, #0
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fdc8 	bl	8000d10 <Encoder_EncodePosition>
	Encoder_EncodePosition(sensors->encoder_1, data_buf, 8);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2208      	movs	r2, #8
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fdc1 	bl	8000d10 <Encoder_EncodePosition>
	Encoder_EncodePosition(sensors->encoder_1, data_buf, 16);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2210      	movs	r2, #16
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fdba 	bl	8000d10 <Encoder_EncodePosition>
	Encoder_EncodePosition(sensors->encoder_1, data_buf, 24);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2218      	movs	r2, #24
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fdb3 	bl	8000d10 <Encoder_EncodePosition>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011ba:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <MX_SPI1_Init+0x70>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI1_Init+0x6c>)
 80011fa:	2207      	movs	r2, #7
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_SPI1_Init+0x6c>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI1_Init+0x6c>)
 8001206:	2200      	movs	r2, #0
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_SPI1_Init+0x6c>)
 800120c:	f002 fc78 	bl	8003b00 <HAL_SPI_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8001216:	f7ff ffa2 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000c0 	.word	0x200000c0
 8001224:	40013000 	.word	0x40013000

08001228 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_SPI2_Init+0x74>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <MX_SPI2_Init+0x78>)
 8001230:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_SPI2_Init+0x74>)
 8001234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001238:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_SPI2_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_SPI2_Init+0x74>)
 8001242:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001246:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_SPI2_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_SPI2_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_SPI2_Init+0x74>)
 8001256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_SPI2_Init+0x74>)
 800125e:	2228      	movs	r2, #40	; 0x28
 8001260:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_SPI2_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_SPI2_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_SPI2_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_SPI2_Init+0x74>)
 8001276:	2207      	movs	r2, #7
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_SPI2_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_SPI2_Init+0x74>)
 8001282:	2208      	movs	r2, #8
 8001284:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_SPI2_Init+0x74>)
 8001288:	f002 fc3a 	bl	8003b00 <HAL_SPI_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001292:	f7ff ff64 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000124 	.word	0x20000124
 80012a0:	40003800 	.word	0x40003800

080012a4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_SPI3_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_SPI3_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_SPI3_Init+0x74>)
 80012b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_SPI3_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_SPI3_Init+0x74>)
 80012be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_SPI3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_SPI3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_SPI3_Init+0x74>)
 80012d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_SPI3_Init+0x74>)
 80012da:	2210      	movs	r2, #16
 80012dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_SPI3_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_SPI3_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_SPI3_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_SPI3_Init+0x74>)
 80012f2:	2207      	movs	r2, #7
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_SPI3_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SPI3_Init+0x74>)
 80012fe:	2208      	movs	r2, #8
 8001300:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_SPI3_Init+0x74>)
 8001304:	f002 fbfc 	bl	8003b00 <HAL_SPI_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800130e:	f7ff ff26 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000188 	.word	0x20000188
 800131c:	40003c00 	.word	0x40003c00

08001320 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08e      	sub	sp, #56	; 0x38
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a46      	ldr	r2, [pc, #280]	; (8001458 <HAL_SPI_MspInit+0x138>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d129      	bne.n	8001396 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800134c:	6613      	str	r3, [r2, #96]	; 0x60
 800134e:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001356:	623b      	str	r3, [r7, #32]
 8001358:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b40      	ldr	r3, [pc, #256]	; (800145c <HAL_SPI_MspInit+0x13c>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a3f      	ldr	r2, [pc, #252]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001372:	23e0      	movs	r3, #224	; 0xe0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001382:	2305      	movs	r3, #5
 8001384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f001 f906 	bl	80025a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001394:	e05c      	b.n	8001450 <HAL_SPI_MspInit+0x130>
  else if(spiHandle->Instance==SPI2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a31      	ldr	r2, [pc, #196]	; (8001460 <HAL_SPI_MspInit+0x140>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d129      	bne.n	80013f4 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013a0:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_SPI_MspInit+0x13c>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	4a2d      	ldr	r2, [pc, #180]	; (800145c <HAL_SPI_MspInit+0x13c>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	6593      	str	r3, [r2, #88]	; 0x58
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_SPI_MspInit+0x13c>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_SPI_MspInit+0x13c>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_SPI_MspInit+0x13c>)
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_SPI_MspInit+0x13c>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013d0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013e2:	2305      	movs	r3, #5
 80013e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4619      	mov	r1, r3
 80013ec:	481d      	ldr	r0, [pc, #116]	; (8001464 <HAL_SPI_MspInit+0x144>)
 80013ee:	f001 f8d7 	bl	80025a0 <HAL_GPIO_Init>
}
 80013f2:	e02d      	b.n	8001450 <HAL_SPI_MspInit+0x130>
  else if(spiHandle->Instance==SPI3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_SPI_MspInit+0x148>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d128      	bne.n	8001450 <HAL_SPI_MspInit+0x130>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_SPI_MspInit+0x13c>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <HAL_SPI_MspInit+0x13c>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_SPI_MspInit+0x13c>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800142e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001440:	2306      	movs	r3, #6
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4808      	ldr	r0, [pc, #32]	; (800146c <HAL_SPI_MspInit+0x14c>)
 800144c:	f001 f8a8 	bl	80025a0 <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	3738      	adds	r7, #56	; 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40013000 	.word	0x40013000
 800145c:	40021000 	.word	0x40021000
 8001460:	40003800 	.word	0x40003800
 8001464:	48000400 	.word	0x48000400
 8001468:	40003c00 	.word	0x40003c00
 800146c:	48000800 	.word	0x48000800

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_MspInit+0x44>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_MspInit+0x44>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6613      	str	r3, [r2, #96]	; 0x60
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_MspInit+0x44>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_MspInit+0x44>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_MspInit+0x44>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6593      	str	r3, [r2, #88]	; 0x58
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_MspInit+0x44>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 fe66 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_MAG_Pin);
 8001510:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001514:	f001 f9de 	bl	80028d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DRDY_MAG_Pin);
 8001518:	f44f 7000 	mov.w	r0, #512	; 0x200
 800151c:	f001 f9da 	bl	80028d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 800152a:	f003 fa6d 	bl	8004a08 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001530:	f003 fa6a 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200001ec 	.word	0x200001ec
 800153c:	200003b4 	.word	0x200003b4

08001540 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM8_CC_IRQHandler+0x10>)
 8001546:	f003 fa5f 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000368 	.word	0x20000368

08001554 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM5_IRQHandler+0x10>)
 800155a:	f003 fa55 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000031c 	.word	0x2000031c

08001568 <TIM20_CC_IRQHandler>:

/**
  * @brief This function handles TIM20 capture compare interrupt.
  */
void TIM20_CC_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM20_CC_IRQn 0 */

  /* USER CODE END TIM20_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim20);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM20_CC_IRQHandler+0x10>)
 800156e:	f003 fa4b 	bl	8004a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM20_CC_IRQn 1 */

  /* USER CODE END TIM20_CC_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000400 	.word	0x20000400

0800157c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2224      	movs	r2, #36	; 0x24
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 f97c 	bl	80058ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_TIM1_Init+0xac>)
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <MX_TIM1_Init+0xb0>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <MX_TIM1_Init+0xac>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_TIM1_Init+0xac>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MX_TIM1_Init+0xac>)
 80015d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_TIM1_Init+0xac>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015de:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_TIM1_Init+0xac>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_TIM1_Init+0xac>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f2:	2301      	movs	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001602:	2301      	movs	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4619      	mov	r1, r3
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_TIM1_Init+0xac>)
 8001616:	f003 f8c3 	bl	80047a0 <HAL_TIM_Encoder_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001620:	f7ff fd9d 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_TIM1_Init+0xac>)
 8001636:	f003 fffd 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001640:	f7ff fd8d 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200001ec 	.word	0x200001ec
 8001650:	40012c00 	.word	0x40012c00

08001654 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2224      	movs	r2, #36	; 0x24
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f004 f922 	bl	80058ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_TIM2_Init+0xa4>)
 8001674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001678:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <MX_TIM2_Init+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_TIM2_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM2_Init+0xa4>)
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_TIM2_Init+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_TIM2_Init+0xa4>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800169a:	2301      	movs	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016a2:	2301      	movs	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <MX_TIM2_Init+0xa4>)
 80016c6:	f003 f86b 	bl	80047a0 <HAL_TIM_Encoder_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80016d0:	f7ff fd45 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_TIM2_Init+0xa4>)
 80016e2:	f003 ffa7 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80016ec:	f7ff fd37 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	3730      	adds	r7, #48	; 0x30
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000238 	.word	0x20000238

080016fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2224      	movs	r2, #36	; 0x24
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f004 f8ce 	bl	80058ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	463b      	mov	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_TIM3_Init+0xa4>)
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <MX_TIM3_Init+0xa8>)
 800171e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_TIM3_Init+0xa4>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_TIM3_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM3_Init+0xa4>)
 800172e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM3_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_TIM3_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001740:	2301      	movs	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001748:	2301      	movs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001758:	2301      	movs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM3_Init+0xa4>)
 800176c:	f003 f818 	bl	80047a0 <HAL_TIM_Encoder_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001776:	f7ff fcf2 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001782:	463b      	mov	r3, r7
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM3_Init+0xa4>)
 8001788:	f003 ff54 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001792:	f7ff fce4 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3730      	adds	r7, #48	; 0x30
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000284 	.word	0x20000284
 80017a4:	40000400 	.word	0x40000400

080017a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08c      	sub	sp, #48	; 0x30
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2224      	movs	r2, #36	; 0x24
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 f878 	bl	80058ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_TIM4_Init+0xa4>)
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <MX_TIM4_Init+0xa8>)
 80017ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_TIM4_Init+0xa4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_TIM4_Init+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_TIM4_Init+0xa4>)
 80017da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_TIM4_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_TIM4_Init+0xa4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017f4:	2301      	movs	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001804:	2301      	movs	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_TIM4_Init+0xa4>)
 8001818:	f002 ffc2 	bl	80047a0 <HAL_TIM_Encoder_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001822:	f7ff fc9c 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800182e:	463b      	mov	r3, r7
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <MX_TIM4_Init+0xa4>)
 8001834:	f003 fefe 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800183e:	f7ff fc8e 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3730      	adds	r7, #48	; 0x30
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200002d0 	.word	0x200002d0
 8001850:	40000800 	.word	0x40000800

08001854 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <MX_TIM5_Init+0xfc>)
 8001884:	4a33      	ldr	r2, [pc, #204]	; (8001954 <MX_TIM5_Init+0x100>)
 8001886:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <MX_TIM5_Init+0xfc>)
 800188a:	2200      	movs	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b30      	ldr	r3, [pc, #192]	; (8001950 <MX_TIM5_Init+0xfc>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <MX_TIM5_Init+0xfc>)
 8001896:	f04f 32ff 	mov.w	r2, #4294967295
 800189a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <MX_TIM5_Init+0xfc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <MX_TIM5_Init+0xfc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80018a8:	4829      	ldr	r0, [pc, #164]	; (8001950 <MX_TIM5_Init+0xfc>)
 80018aa:	f002 fccd 	bl	8004248 <HAL_TIM_IC_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80018b4:	f7ff fc53 	bl	800115e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80018b8:	2304      	movs	r3, #4
 80018ba:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80018bc:	2350      	movs	r3, #80	; 0x50
 80018be:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	481f      	ldr	r0, [pc, #124]	; (8001950 <MX_TIM5_Init+0xfc>)
 80018d4:	f003 fab3 	bl	8004e3e <HAL_TIM_SlaveConfigSynchro>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80018de:	f7ff fc3e 	bl	800115e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018e6:	2301      	movs	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4815      	ldr	r0, [pc, #84]	; (8001950 <MX_TIM5_Init+0xfc>)
 80018fc:	f003 fa03 	bl	8004d06 <HAL_TIM_IC_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8001906:	f7ff fc2a 	bl	800115e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800190a:	2302      	movs	r3, #2
 800190c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800190e:	2302      	movs	r3, #2
 8001910:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	2204      	movs	r2, #4
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_TIM5_Init+0xfc>)
 800191c:	f003 f9f3 	bl	8004d06 <HAL_TIM_IC_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001926:	f7ff fc1a 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	4619      	mov	r1, r3
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <MX_TIM5_Init+0xfc>)
 8001938:	f003 fe7c 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8001942:	f7ff fc0c 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	3730      	adds	r7, #48	; 0x30
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000031c 	.word	0x2000031c
 8001954:	40000c00 	.word	0x40000c00

08001958 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	463b      	mov	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001986:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <MX_TIM8_Init+0x104>)
 8001988:	4a35      	ldr	r2, [pc, #212]	; (8001a60 <MX_TIM8_Init+0x108>)
 800198a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <MX_TIM8_Init+0x104>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <MX_TIM8_Init+0x104>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001998:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <MX_TIM8_Init+0x104>)
 800199a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800199e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <MX_TIM8_Init+0x104>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <MX_TIM8_Init+0x104>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <MX_TIM8_Init+0x104>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80019b2:	482a      	ldr	r0, [pc, #168]	; (8001a5c <MX_TIM8_Init+0x104>)
 80019b4:	f002 fc48 	bl	8004248 <HAL_TIM_IC_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80019be:	f7ff fbce 	bl	800115e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80019c2:	2304      	movs	r3, #4
 80019c4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019c6:	2350      	movs	r3, #80	; 0x50
 80019c8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	481f      	ldr	r0, [pc, #124]	; (8001a5c <MX_TIM8_Init+0x104>)
 80019de:	f003 fa2e 	bl	8004e3e <HAL_TIM_SlaveConfigSynchro>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80019e8:	f7ff fbb9 	bl	800115e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019f0:	2301      	movs	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	4619      	mov	r1, r3
 8001a04:	4815      	ldr	r0, [pc, #84]	; (8001a5c <MX_TIM8_Init+0x104>)
 8001a06:	f003 f97e 	bl	8004d06 <HAL_TIM_IC_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001a10:	f7ff fba5 	bl	800115e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a14:	2302      	movs	r3, #2
 8001a16:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2204      	movs	r2, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <MX_TIM8_Init+0x104>)
 8001a26:	f003 f96e 	bl	8004d06 <HAL_TIM_IC_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001a30:	f7ff fb95 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM8_Init+0x104>)
 8001a46:	f003 fdf5 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 8001a50:	f7ff fb85 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	; 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000368 	.word	0x20000368
 8001a60:	40013400 	.word	0x40013400

08001a64 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001a94:	4a34      	ldr	r2, [pc, #208]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001a96:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001a98:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aaa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001abe:	4829      	ldr	r0, [pc, #164]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001ac0:	f002 fbc2 	bl	8004248 <HAL_TIM_IC_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 8001aca:	f7ff fb48 	bl	800115e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ad2:	2350      	movs	r3, #80	; 0x50
 8001ad4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	481e      	ldr	r0, [pc, #120]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001aea:	f003 f9a8 	bl	8004e3e <HAL_TIM_SlaveConfigSynchro>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001af4:	f7ff fb33 	bl	800115e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001afc:	2301      	movs	r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4814      	ldr	r0, [pc, #80]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001b12:	f003 f8f8 	bl	8004d06 <HAL_TIM_IC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 8001b1c:	f7ff fb1f 	bl	800115e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b20:	2302      	movs	r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b24:	2302      	movs	r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001b32:	f003 f8e8 	bl	8004d06 <HAL_TIM_IC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 8001b3c:	f7ff fb0f 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_TIM15_Init+0x100>)
 8001b4e:	f003 fd71 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001b58:	f7ff fb01 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3730      	adds	r7, #48	; 0x30
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200003b4 	.word	0x200003b4
 8001b68:	40014000 	.word	0x40014000

08001b6c <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	463b      	mov	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001b9c:	4a35      	ldr	r2, [pc, #212]	; (8001c74 <MX_TIM20_Init+0x108>)
 8001b9e:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001ba0:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba6:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001bac:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb2:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim20) != HAL_OK)
 8001bc6:	482a      	ldr	r0, [pc, #168]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001bc8:	f002 fb3e 	bl	8004248 <HAL_TIM_IC_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM20_Init+0x6a>
  {
    Error_Handler();
 8001bd2:	f7ff fac4 	bl	800115e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001bda:	2350      	movs	r3, #80	; 0x50
 8001bdc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim20, &sSlaveConfig) != HAL_OK)
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481f      	ldr	r0, [pc, #124]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001bf2:	f003 f924 	bl	8004e3e <HAL_TIM_SlaveConfigSynchro>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM20_Init+0x94>
  {
    Error_Handler();
 8001bfc:	f7ff faaf 	bl	800115e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c04:	2301      	movs	r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	2200      	movs	r2, #0
 8001c16:	4619      	mov	r1, r3
 8001c18:	4815      	ldr	r0, [pc, #84]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001c1a:	f003 f874 	bl	8004d06 <HAL_TIM_IC_ConfigChannel>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM20_Init+0xbc>
  {
    Error_Handler();
 8001c24:	f7ff fa9b 	bl	800115e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim20, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2204      	movs	r2, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001c3a:	f003 f864 	bl	8004d06 <HAL_TIM_IC_ConfigChannel>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM20_Init+0xdc>
  {
    Error_Handler();
 8001c44:	f7ff fa8b 	bl	800115e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001c54:	463b      	mov	r3, r7
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_TIM20_Init+0x104>)
 8001c5a:	f003 fceb 	bl	8005634 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM20_Init+0xfc>
  {
    Error_Handler();
 8001c64:	f7ff fa7b 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	3730      	adds	r7, #48	; 0x30
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000400 	.word	0x20000400
 8001c74:	40015000 	.word	0x40015000

08001c78 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b090      	sub	sp, #64	; 0x40
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a61      	ldr	r2, [pc, #388]	; (8001e1c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d130      	bne.n	8001cfc <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9e:	4a60      	ldr	r2, [pc, #384]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca6:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb2:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a5a      	ldr	r2, [pc, #360]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b58      	ldr	r3, [pc, #352]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_1_A_Pin|ENC_1_B_Pin;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	484f      	ldr	r0, [pc, #316]	; (8001e24 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8001ce6:	f000 fc5b 	bl	80025a0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2018      	movs	r0, #24
 8001cf0:	f000 fb69 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001cf4:	2018      	movs	r0, #24
 8001cf6:	f000 fb80 	bl	80023fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001cfa:	e08a      	b.n	8001e12 <HAL_TIM_Encoder_MspInit+0x19a>
  else if(tim_encoderHandle->Instance==TIM2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d04:	d12a      	bne.n	8001d5c <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4a45      	ldr	r2, [pc, #276]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	623b      	str	r3, [r7, #32]
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	4a3f      	ldr	r2, [pc, #252]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC_2_B_Pin|ENC_2_A_Pin;
 8001d36:	f248 0302 	movw	r3, #32770	; 0x8002
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f000 fc23 	bl	80025a0 <HAL_GPIO_Init>
}
 8001d5a:	e05a      	b.n	8001e12 <HAL_TIM_Encoder_MspInit+0x19a>
  else if(tim_encoderHandle->Instance==TIM3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d128      	bne.n	8001db8 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d66:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a2d      	ldr	r2, [pc, #180]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
 8001d72:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC_3_A_Pin|ENC_3_B_Pin;
 8001d96:	2330      	movs	r3, #48	; 0x30
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da6:	2302      	movs	r3, #2
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dae:	4619      	mov	r1, r3
 8001db0:	481e      	ldr	r0, [pc, #120]	; (8001e2c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001db2:	f000 fbf5 	bl	80025a0 <HAL_GPIO_Init>
}
 8001db6:	e02c      	b.n	8001e12 <HAL_TIM_Encoder_MspInit+0x19a>
  else if(tim_encoderHandle->Instance==TIM4)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d127      	bne.n	8001e12 <HAL_TIM_Encoder_MspInit+0x19a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_4_A_Pin|ENC_4_B_Pin;
 8001df2:	23c0      	movs	r3, #192	; 0xc0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e02:	2302      	movs	r3, #2
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4807      	ldr	r0, [pc, #28]	; (8001e2c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001e0e:	f000 fbc7 	bl	80025a0 <HAL_GPIO_Init>
}
 8001e12:	bf00      	nop
 8001e14:	3740      	adds	r7, #64	; 0x40
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	48000800 	.word	0x48000800
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	40000800 	.word	0x40000800

08001e34 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b090      	sub	sp, #64	; 0x40
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a6d      	ldr	r2, [pc, #436]	; (8002008 <HAL_TIM_IC_MspInit+0x1d4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d131      	bne.n	8001eba <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e56:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
 8001e62:	4b6a      	ldr	r3, [pc, #424]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b67      	ldr	r3, [pc, #412]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a66      	ldr	r2, [pc, #408]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b64      	ldr	r3, [pc, #400]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = ENC_A_ABS_Pin;
 8001e86:	2301      	movs	r3, #1
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e96:	2302      	movs	r3, #2
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_A_ABS_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea4:	f000 fb7c 	bl	80025a0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2032      	movs	r0, #50	; 0x32
 8001eae:	f000 fa8a 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001eb2:	2032      	movs	r0, #50	; 0x32
 8001eb4:	f000 faa1 	bl	80023fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM20_CC_IRQn);
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8001eb8:	e0a1      	b.n	8001ffe <HAL_TIM_IC_MspInit+0x1ca>
  else if(tim_icHandle->Instance==TIM8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a54      	ldr	r2, [pc, #336]	; (8002010 <HAL_TIM_IC_MspInit+0x1dc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d130      	bne.n	8001f26 <HAL_TIM_IC_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ec4:	4b51      	ldr	r3, [pc, #324]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	4a50      	ldr	r2, [pc, #320]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001eca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ece:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee8:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC_3_ABS_Pin;
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001f04:	2304      	movs	r3, #4
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_3_ABS_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4841      	ldr	r0, [pc, #260]	; (8002014 <HAL_TIM_IC_MspInit+0x1e0>)
 8001f10:	f000 fb46 	bl	80025a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	202e      	movs	r0, #46	; 0x2e
 8001f1a:	f000 fa54 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001f1e:	202e      	movs	r0, #46	; 0x2e
 8001f20:	f000 fa6b 	bl	80023fa <HAL_NVIC_EnableIRQ>
}
 8001f24:	e06b      	b.n	8001ffe <HAL_TIM_IC_MspInit+0x1ca>
  else if(tim_icHandle->Instance==TIM15)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <HAL_TIM_IC_MspInit+0x1e4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d131      	bne.n	8001f94 <HAL_TIM_IC_MspInit+0x160>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f34:	4a35      	ldr	r2, [pc, #212]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f3c:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	4a2f      	ldr	r2, [pc, #188]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC_2_ABS_Pin;
 8001f60:	2304      	movs	r3, #4
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001f70:	2309      	movs	r3, #9
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_2_ABS_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f7e:	f000 fb0f 	bl	80025a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2018      	movs	r0, #24
 8001f88:	f000 fa1d 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f8c:	2018      	movs	r0, #24
 8001f8e:	f000 fa34 	bl	80023fa <HAL_NVIC_EnableIRQ>
}
 8001f92:	e034      	b.n	8001ffe <HAL_TIM_IC_MspInit+0x1ca>
  else if(tim_icHandle->Instance==TIM20)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_TIM_IC_MspInit+0x1e8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12f      	bne.n	8001ffe <HAL_TIM_IC_MspInit+0x1ca>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	4a1a      	ldr	r2, [pc, #104]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_TIM_IC_MspInit+0x1d8>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_4_ABS_Pin;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC_4_ABS_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480d      	ldr	r0, [pc, #52]	; (8002020 <HAL_TIM_IC_MspInit+0x1ec>)
 8001fea:	f000 fad9 	bl	80025a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM20_CC_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2050      	movs	r0, #80	; 0x50
 8001ff4:	f000 f9e7 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM20_CC_IRQn);
 8001ff8:	2050      	movs	r0, #80	; 0x50
 8001ffa:	f000 f9fe 	bl	80023fa <HAL_NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3740      	adds	r7, #64	; 0x40
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40000c00 	.word	0x40000c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40013400 	.word	0x40013400
 8002014:	48000800 	.word	0x48000800
 8002018:	40014000 	.word	0x40014000
 800201c:	40015000 	.word	0x40015000
 8002020:	48000400 	.word	0x48000400

08002024 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002028:	4b10      	ldr	r3, [pc, #64]	; (800206c <MX_USB_PCD_Init+0x48>)
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <MX_USB_PCD_Init+0x4c>)
 800202c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <MX_USB_PCD_Init+0x48>)
 8002030:	2208      	movs	r2, #8
 8002032:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <MX_USB_PCD_Init+0x48>)
 8002036:	2202      	movs	r2, #2
 8002038:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_USB_PCD_Init+0x48>)
 800203c:	2202      	movs	r2, #2
 800203e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <MX_USB_PCD_Init+0x48>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_USB_PCD_Init+0x48>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <MX_USB_PCD_Init+0x48>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_USB_PCD_Init+0x48>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <MX_USB_PCD_Init+0x48>)
 800205a:	f000 fc53 	bl	8002904 <HAL_PCD_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002064:	f7ff f87b 	bl	800115e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000044c 	.word	0x2000044c
 8002070:	40005c00 	.word	0x40005c00

08002074 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b098      	sub	sp, #96	; 0x60
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2254      	movs	r2, #84	; 0x54
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fc11 	bl	80058ac <memset>
  if(pcdHandle->Instance==USB)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_PCD_MspInit+0x60>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d11a      	bne.n	80020ca <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002098:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800209a:	2300      	movs	r3, #0
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 fade 	bl	8003664 <HAL_RCCEx_PeriphCLKConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80020ae:	f7ff f856 	bl	800115e <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_PCD_MspInit+0x64>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_PCD_MspInit+0x64>)
 80020b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020bc:	6593      	str	r3, [r2, #88]	; 0x58
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_PCD_MspInit+0x64>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80020ca:	bf00      	nop
 80020cc:	3760      	adds	r7, #96	; 0x60
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40005c00 	.word	0x40005c00
 80020d8:	40021000 	.word	0x40021000

080020dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <LoopForever+0x6>)
  ldr r1, =_edata
 80020e2:	490e      	ldr	r1, [pc, #56]	; (800211c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <LoopForever+0xe>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f8:	4c0b      	ldr	r4, [pc, #44]	; (8002128 <LoopForever+0x16>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002106:	f7ff fa39 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210a:	f003 fbab 	bl	8005864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800210e:	f7fe ff85 	bl	800101c <main>

08002112 <LoopForever>:

LoopForever:
    b LoopForever
 8002112:	e7fe      	b.n	8002112 <LoopForever>
  ldr   r0, =_estack
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002120:	080058ec 	.word	0x080058ec
  ldr r2, =_sbss
 8002124:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002128:	20000744 	.word	0x20000744

0800212c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC1_2_IRQHandler>

0800212e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 f939 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213e:	200f      	movs	r0, #15
 8002140:	f000 f80e 	bl	8002160 <HAL_InitTick>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	e001      	b.n	8002154 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002150:	f7ff f98e 	bl	8001470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002154:	79fb      	ldrb	r3, [r7, #7]

}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_InitTick+0x68>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d022      	beq.n	80021ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_InitTick+0x6c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <HAL_InitTick+0x68>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002180:	fbb1 f3f3 	udiv	r3, r1, r3
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f944 	bl	8002416 <HAL_SYSTICK_Config>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10f      	bne.n	80021b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b0f      	cmp	r3, #15
 8002198:	d809      	bhi.n	80021ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219a:	2200      	movs	r2, #0
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	f04f 30ff 	mov.w	r0, #4294967295
 80021a2:	f000 f910 	bl	80023c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_InitTick+0x70>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	e007      	b.n	80021be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e004      	b.n	80021be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000004 	.word	0x20000004

080021d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_IncTick+0x1c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_IncTick+0x20>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a03      	ldr	r2, [pc, #12]	; (80021f0 <HAL_IncTick+0x1c>)
 80021e4:	6013      	str	r3, [r2, #0]
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20000740 	.word	0x20000740
 80021f4:	20000008 	.word	0x20000008

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000740 	.word	0x20000740

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	; (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	; (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff40 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff90 	bl	8002304 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5f 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff33 	bl	8002274 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffa4 	bl	800236c <SysTick_Config>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_DMA_Start_IT+0x20>
 800244a:	2302      	movs	r3, #2
 800244c:	e066      	b.n	800251c <HAL_DMA_Start_IT+0xee>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d155      	bne.n	800250e <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f84c 	bl	8002524 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 020e 	orr.w	r2, r2, #14
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e00f      	b.n	80024c6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0204 	bic.w	r2, r2, #4
 80024b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 020a 	orr.w	r2, r2, #10
 80024c4:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e005      	b.n	800251a <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002516:	2302      	movs	r3, #2
 8002518:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800253a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800254c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f003 021f 	and.w	r2, r3, #31
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b10      	cmp	r3, #16
 8002570:	d108      	bne.n	8002584 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002582:	e007      	b.n	8002594 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	60da      	str	r2, [r3, #12]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ae:	e15a      	b.n	8002866 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2101      	movs	r1, #1
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 814c 	beq.w	8002860 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d005      	beq.n	80025e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d130      	bne.n	8002642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002616:	2201      	movs	r2, #1
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 0201 	and.w	r2, r3, #1
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b03      	cmp	r3, #3
 800264c:	d017      	beq.n	800267e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d123      	bne.n	80026d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	08da      	lsrs	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3208      	adds	r2, #8
 80026cc:	6939      	ldr	r1, [r7, #16]
 80026ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2203      	movs	r2, #3
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0203 	and.w	r2, r3, #3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a6 	beq.w	8002860 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002714:	4b5b      	ldr	r3, [pc, #364]	; (8002884 <HAL_GPIO_Init+0x2e4>)
 8002716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002718:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_GPIO_Init+0x2e4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6613      	str	r3, [r2, #96]	; 0x60
 8002720:	4b58      	ldr	r3, [pc, #352]	; (8002884 <HAL_GPIO_Init+0x2e4>)
 8002722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272c:	4a56      	ldr	r2, [pc, #344]	; (8002888 <HAL_GPIO_Init+0x2e8>)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	220f      	movs	r2, #15
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002756:	d01f      	beq.n	8002798 <HAL_GPIO_Init+0x1f8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a4c      	ldr	r2, [pc, #304]	; (800288c <HAL_GPIO_Init+0x2ec>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d019      	beq.n	8002794 <HAL_GPIO_Init+0x1f4>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a4b      	ldr	r2, [pc, #300]	; (8002890 <HAL_GPIO_Init+0x2f0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_GPIO_Init+0x1f0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a4a      	ldr	r2, [pc, #296]	; (8002894 <HAL_GPIO_Init+0x2f4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00d      	beq.n	800278c <HAL_GPIO_Init+0x1ec>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a49      	ldr	r2, [pc, #292]	; (8002898 <HAL_GPIO_Init+0x2f8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d007      	beq.n	8002788 <HAL_GPIO_Init+0x1e8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a48      	ldr	r2, [pc, #288]	; (800289c <HAL_GPIO_Init+0x2fc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_GPIO_Init+0x1e4>
 8002780:	2305      	movs	r3, #5
 8002782:	e00a      	b.n	800279a <HAL_GPIO_Init+0x1fa>
 8002784:	2306      	movs	r3, #6
 8002786:	e008      	b.n	800279a <HAL_GPIO_Init+0x1fa>
 8002788:	2304      	movs	r3, #4
 800278a:	e006      	b.n	800279a <HAL_GPIO_Init+0x1fa>
 800278c:	2303      	movs	r3, #3
 800278e:	e004      	b.n	800279a <HAL_GPIO_Init+0x1fa>
 8002790:	2302      	movs	r3, #2
 8002792:	e002      	b.n	800279a <HAL_GPIO_Init+0x1fa>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_GPIO_Init+0x1fa>
 8002798:	2300      	movs	r3, #0
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	f002 0203 	and.w	r2, r2, #3
 80027a0:	0092      	lsls	r2, r2, #2
 80027a2:	4093      	lsls	r3, r2
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027aa:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_GPIO_Init+0x2e8>)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b8:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_GPIO_Init+0x300>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027dc:	4a30      	ldr	r2, [pc, #192]	; (80028a0 <HAL_GPIO_Init+0x300>)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027e2:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_GPIO_Init+0x300>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002806:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <HAL_GPIO_Init+0x300>)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800280c:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_GPIO_Init+0x300>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_GPIO_Init+0x300>)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <HAL_GPIO_Init+0x300>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800285a:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <HAL_GPIO_Init+0x300>)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	f47f ae9d 	bne.w	80025b0 <HAL_GPIO_Init+0x10>
  }
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40021000 	.word	0x40021000
 8002888:	40010000 	.word	0x40010000
 800288c:	48000400 	.word	0x48000400
 8002890:	48000800 	.word	0x48000800
 8002894:	48000c00 	.word	0x48000c00
 8002898:	48001000 	.word	0x48001000
 800289c:	48001400 	.word	0x48001400
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
 80028b0:	4613      	mov	r3, r2
 80028b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b4:	787b      	ldrb	r3, [r7, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ba:	887a      	ldrh	r2, [r7, #2]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d006      	beq.n	80028f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe f902 	bl	8000afc <HAL_GPIO_EXTI_Callback>
  }
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40010400 	.word	0x40010400

08002904 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002906:	b08b      	sub	sp, #44	; 0x2c
 8002908:	af06      	add	r7, sp, #24
 800290a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0d7      	b.n	8002ac6 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff fba2 	bl	8002074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2203      	movs	r2, #3
 8002934:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f002 ff55 	bl	80057ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
 8002946:	e04c      	b.n	80029e2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	3301      	adds	r3, #1
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	b298      	uxth	r0, r3
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	3336      	adds	r3, #54	; 0x36
 8002986:	4602      	mov	r2, r0
 8002988:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	3303      	adds	r3, #3
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	440b      	add	r3, r1
 80029ae:	3338      	adds	r3, #56	; 0x38
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	333c      	adds	r3, #60	; 0x3c
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	3340      	adds	r3, #64	; 0x40
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	3301      	adds	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3ad      	bcc.n	8002948 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	e044      	b.n	8002a7c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d3b5      	bcc.n	80029f2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	687e      	ldr	r6, [r7, #4]
 8002a8e:	466d      	mov	r5, sp
 8002a90:	f106 0410 	add.w	r4, r6, #16
 8002a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	602b      	str	r3, [r5, #0]
 8002a9c:	1d33      	adds	r3, r6, #4
 8002a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa0:	6838      	ldr	r0, [r7, #0]
 8002aa2:	f002 febe 	bl	8005822 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f805 	bl	8002ace <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ace <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d141      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b32:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d131      	bne.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b46:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b50:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b58:	4a41      	ldr	r2, [pc, #260]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b60:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2232      	movs	r2, #50	; 0x32
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	4a3f      	ldr	r2, [pc, #252]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	0c9b      	lsrs	r3, r3, #18
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b76:	e002      	b.n	8002b7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d102      	bne.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f2      	bne.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b92:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9e:	d158      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e057      	b.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002baa:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bb4:	e04d      	b.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bbc:	d141      	bne.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bca:	d131      	bne.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bcc:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd2:	4a23      	ldr	r2, [pc, #140]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2232      	movs	r2, #50	; 0x32
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c02:	e002      	b.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c16:	d102      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f2      	bne.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2a:	d112      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e011      	b.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c40:	e007      	b.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40007000 	.word	0x40007000
 8002c64:	20000000 	.word	0x20000000
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e306      	b.n	800328c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d075      	beq.n	8002d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	4b97      	ldr	r3, [pc, #604]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c94:	4b94      	ldr	r3, [pc, #592]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d102      	bne.n	8002caa <HAL_RCC_OscConfig+0x3e>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x44>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	4b8d      	ldr	r3, [pc, #564]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05b      	beq.n	8002d74 <HAL_RCC_OscConfig+0x108>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d157      	bne.n	8002d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e2e1      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x74>
 8002cd2:	4b85      	ldr	r3, [pc, #532]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a84      	ldr	r2, [pc, #528]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x98>
 8002cea:	4b7f      	ldr	r3, [pc, #508]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7e      	ldr	r2, [pc, #504]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b7c      	ldr	r3, [pc, #496]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7b      	ldr	r2, [pc, #492]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002d04:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a77      	ldr	r2, [pc, #476]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b75      	ldr	r3, [pc, #468]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a74      	ldr	r2, [pc, #464]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7ff fa68 	bl	80021f8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7ff fa64 	bl	80021f8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e2a6      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7ff fa54 	bl	80021f8 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7ff fa50 	bl	80021f8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e292      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d66:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0xe8>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d075      	beq.n	8002e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d82:	4b59      	ldr	r3, [pc, #356]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d8c:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d102      	bne.n	8002da2 <HAL_RCC_OscConfig+0x136>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_OscConfig+0x13c>
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d11f      	bne.n	8002de8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x154>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e265      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	4946      	ldr	r1, [pc, #280]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dd4:	4b45      	ldr	r3, [pc, #276]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff f9c1 	bl	8002160 <HAL_InitTick>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d043      	beq.n	8002e6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e251      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3c      	ldr	r2, [pc, #240]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f9fc 	bl	80021f8 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7ff f9f8 	bl	80021f8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e23a      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	492d      	ldr	r1, [pc, #180]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
 8002e36:	e01a      	b.n	8002e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7ff f9d8 	bl	80021f8 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7ff f9d4 	bl	80021f8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e216      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e5e:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1e0>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d041      	beq.n	8002efe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01c      	beq.n	8002ebc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7ff f9b1 	bl	80021f8 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9a:	f7ff f9ad 	bl	80021f8 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e1ef      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ef      	beq.n	8002e9a <HAL_RCC_OscConfig+0x22e>
 8002eba:	e020      	b.n	8002efe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7ff f994 	bl	80021f8 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed2:	e00d      	b.n	8002ef0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7ff f990 	bl	80021f8 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d906      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1d2      	b.n	800328c <HAL_RCC_OscConfig+0x620>
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef0:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ea      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80a6 	beq.w	8003058 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f10:	4b84      	ldr	r3, [pc, #528]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x2b4>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x2b6>
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b7f      	ldr	r3, [pc, #508]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	4a7e      	ldr	r2, [pc, #504]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6593      	str	r3, [r2, #88]	; 0x58
 8002f32:	4b7c      	ldr	r3, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f42:	4b79      	ldr	r3, [pc, #484]	; (8003128 <HAL_RCC_OscConfig+0x4bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x4bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a75      	ldr	r2, [pc, #468]	; (8003128 <HAL_RCC_OscConfig+0x4bc>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7ff f94d 	bl	80021f8 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7ff f949 	bl	80021f8 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e18b      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f74:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCC_OscConfig+0x4bc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d108      	bne.n	8002f9a <HAL_RCC_OscConfig+0x32e>
 8002f88:	4b66      	ldr	r3, [pc, #408]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f98:	e024      	b.n	8002fe4 <HAL_RCC_OscConfig+0x378>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d110      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x358>
 8002fa2:	4b60      	ldr	r3, [pc, #384]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa8:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb8:	4a5a      	ldr	r2, [pc, #360]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc2:	e00f      	b.n	8002fe4 <HAL_RCC_OscConfig+0x378>
 8002fc4:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	4a56      	ldr	r2, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd4:	4b53      	ldr	r3, [pc, #332]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fda:	4a52      	ldr	r2, [pc, #328]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d016      	beq.n	800301a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7ff f904 	bl	80021f8 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7ff f900 	bl	80021f8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e140      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800300a:	4b46      	ldr	r3, [pc, #280]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ed      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x388>
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7ff f8ed 	bl	80021f8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7ff f8e9 	bl	80021f8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e129      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003038:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ed      	bne.n	8003022 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003046:	7ffb      	ldrb	r3, [r7, #31]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304c:	4b35      	ldr	r3, [pc, #212]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003056:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03c      	beq.n	80030de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800306c:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 800306e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003072:	4a2c      	ldr	r2, [pc, #176]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7ff f8bc 	bl	80021f8 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003084:	f7ff f8b8 	bl	80021f8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0fa      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ef      	beq.n	8003084 <HAL_RCC_OscConfig+0x418>
 80030a4:	e01b      	b.n	80030de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 80030a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ac:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7ff f89f 	bl	80021f8 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030be:	f7ff f89b 	bl	80021f8 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e0dd      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 80030d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ef      	bne.n	80030be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80d1 	beq.w	800328a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
 80030f0:	2b0c      	cmp	r3, #12
 80030f2:	f000 808b 	beq.w	800320c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d15e      	bne.n	80031bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_RCC_OscConfig+0x4b8>)
 8003104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7ff f875 	bl	80021f8 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003110:	e00c      	b.n	800312c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003112:	f7ff f871 	bl	80021f8 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d905      	bls.n	800312c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0b3      	b.n	800328c <HAL_RCC_OscConfig+0x620>
 8003124:	40021000 	.word	0x40021000
 8003128:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312c:	4b59      	ldr	r3, [pc, #356]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ec      	bne.n	8003112 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003138:	4b56      	ldr	r3, [pc, #344]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b56      	ldr	r3, [pc, #344]	; (8003298 <HAL_RCC_OscConfig+0x62c>)
 800313e:	4013      	ands	r3, r2
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6a11      	ldr	r1, [r2, #32]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003148:	3a01      	subs	r2, #1
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	4311      	orrs	r1, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003152:	0212      	lsls	r2, r2, #8
 8003154:	4311      	orrs	r1, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800315a:	0852      	lsrs	r2, r2, #1
 800315c:	3a01      	subs	r2, #1
 800315e:	0552      	lsls	r2, r2, #21
 8003160:	4311      	orrs	r1, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003166:	0852      	lsrs	r2, r2, #1
 8003168:	3a01      	subs	r2, #1
 800316a:	0652      	lsls	r2, r2, #25
 800316c:	4311      	orrs	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003172:	06d2      	lsls	r2, r2, #27
 8003174:	430a      	orrs	r2, r1
 8003176:	4947      	ldr	r1, [pc, #284]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 8003178:	4313      	orrs	r3, r2
 800317a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b45      	ldr	r3, [pc, #276]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a44      	ldr	r2, [pc, #272]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 8003182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003186:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003188:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4a41      	ldr	r2, [pc, #260]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800318e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003192:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7ff f830 	bl	80021f8 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319c:	f7ff f82c 	bl	80021f8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e06e      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x530>
 80031ba:	e066      	b.n	800328a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a34      	ldr	r2, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a31      	ldr	r2, [pc, #196]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031d4:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a2e      	ldr	r2, [pc, #184]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 80031da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7ff f808 	bl	80021f8 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7ff f804 	bl	80021f8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e046      	b.n	800328c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fe:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x580>
 800320a:	e03e      	b.n	800328a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e039      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_OscConfig+0x628>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 0203 	and.w	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	429a      	cmp	r2, r3
 800322a:	d12c      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	3b01      	subs	r3, #1
 8003238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d123      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d11b      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d113      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	3b01      	subs	r3, #1
 800326c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800326e:	429a      	cmp	r2, r3
 8003270:	d109      	bne.n	8003286 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	3b01      	subs	r3, #1
 8003280:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000
 8003298:	019f800c 	.word	0x019f800c

0800329c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e11e      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b91      	ldr	r3, [pc, #580]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d910      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b8e      	ldr	r3, [pc, #568]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 020f 	bic.w	r2, r3, #15
 80032ca:	498c      	ldr	r1, [pc, #560]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b8a      	ldr	r3, [pc, #552]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e106      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d073      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d129      	bne.n	800334c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f8:	4b81      	ldr	r3, [pc, #516]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0f4      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003308:	f000 f966 	bl	80035d8 <RCC_GetSysClockFreqFromPLLSource>
 800330c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4a7c      	ldr	r2, [pc, #496]	; (8003504 <HAL_RCC_ClockConfig+0x268>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d93f      	bls.n	8003396 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003316:	4b7a      	ldr	r3, [pc, #488]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	d033      	beq.n	8003396 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d12f      	bne.n	8003396 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003336:	4b72      	ldr	r3, [pc, #456]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333e:	4a70      	ldr	r2, [pc, #448]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003344:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e024      	b.n	8003396 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b02      	cmp	r3, #2
 8003352:	d107      	bne.n	8003364 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003354:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d109      	bne.n	8003374 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0c6      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0be      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003374:	f000 f8ce 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 8003378:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4a61      	ldr	r2, [pc, #388]	; (8003504 <HAL_RCC_ClockConfig+0x268>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d909      	bls.n	8003396 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338a:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 800338c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003390:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4b5a      	ldr	r3, [pc, #360]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4957      	ldr	r1, [pc, #348]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a8:	f7fe ff26 	bl	80021f8 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe ff22 	bl	80021f8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e095      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 020c 	and.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1eb      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d023      	beq.n	800342c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a42      	ldr	r2, [pc, #264]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80033f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003408:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003410:	4a3b      	ldr	r2, [pc, #236]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003416:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4936      	ldr	r1, [pc, #216]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
 800342a:	e008      	b.n	800343e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d105      	bne.n	800343e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003432:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4a32      	ldr	r2, [pc, #200]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800343c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800343e:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d21d      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 020f 	bic.w	r2, r3, #15
 8003454:	4929      	ldr	r1, [pc, #164]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800345c:	f7fe fecc 	bl	80021f8 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fe fec8 	bl	80021f8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e03b      	b.n	80034f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_ClockConfig+0x260>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d1ed      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4917      	ldr	r1, [pc, #92]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	490f      	ldr	r1, [pc, #60]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034c6:	f000 f825 	bl	8003514 <HAL_RCC_GetSysClockFreq>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <HAL_RCC_ClockConfig+0x264>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	490c      	ldr	r1, [pc, #48]	; (8003508 <HAL_RCC_ClockConfig+0x26c>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x270>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_RCC_ClockConfig+0x274>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fe38 	bl	8002160 <HAL_InitTick>
 80034f0:	4603      	mov	r3, r0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40022000 	.word	0x40022000
 8003500:	40021000 	.word	0x40021000
 8003504:	04c4b400 	.word	0x04c4b400
 8003508:	080058d4 	.word	0x080058d4
 800350c:	20000000 	.word	0x20000000
 8003510:	20000004 	.word	0x20000004

08003514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b04      	cmp	r3, #4
 8003524:	d102      	bne.n	800352c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003528:	613b      	str	r3, [r7, #16]
 800352a:	e047      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d102      	bne.n	800353e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	e03e      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d136      	bne.n	80035b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	3301      	adds	r3, #1
 8003560:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d10c      	bne.n	8003582 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	4a16      	ldr	r2, [pc, #88]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003572:	68d2      	ldr	r2, [r2, #12]
 8003574:	0a12      	lsrs	r2, r2, #8
 8003576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	617b      	str	r3, [r7, #20]
      break;
 8003580:	e00c      	b.n	800359c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003582:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	4a10      	ldr	r2, [pc, #64]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	0a12      	lsrs	r2, r2, #8
 8003590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
      break;
 800359a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0e5b      	lsrs	r3, r3, #25
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	3301      	adds	r3, #1
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e001      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035bc:	693b      	ldr	r3, [r7, #16]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	016e3600 	.word	0x016e3600

080035d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	3301      	adds	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d10c      	bne.n	8003616 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035fc:	4a17      	ldr	r2, [pc, #92]	; (800365c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003606:	68d2      	ldr	r2, [r2, #12]
 8003608:	0a12      	lsrs	r2, r2, #8
 800360a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	617b      	str	r3, [r7, #20]
    break;
 8003614:	e00c      	b.n	8003630 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003616:	4a12      	ldr	r2, [pc, #72]	; (8003660 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	0a12      	lsrs	r2, r2, #8
 8003624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]
    break;
 800362e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0e5b      	lsrs	r3, r3, #25
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800364a:	687b      	ldr	r3, [r7, #4]
}
 800364c:	4618      	mov	r0, r3
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40021000 	.word	0x40021000
 800365c:	016e3600 	.word	0x016e3600
 8003660:	00f42400 	.word	0x00f42400

08003664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800366c:	2300      	movs	r3, #0
 800366e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003670:	2300      	movs	r3, #0
 8003672:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8098 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b40      	ldr	r3, [pc, #256]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	4a3f      	ldr	r2, [pc, #252]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6593      	str	r3, [r2, #88]	; 0x58
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036aa:	2301      	movs	r3, #1
 80036ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ae:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a39      	ldr	r2, [pc, #228]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036ba:	f7fe fd9d 	bl	80021f8 <HAL_GetTick>
 80036be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036c0:	e009      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fe fd99 	bl	80021f8 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d902      	bls.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	74fb      	strb	r3, [r7, #19]
        break;
 80036d4:	e005      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036d6:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ef      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80036e2:	7cfb      	ldrb	r3, [r7, #19]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d159      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01e      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	429a      	cmp	r2, r3
 8003702:	d019      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003730:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fe fd59 	bl	80021f8 <HAL_GetTick>
 8003746:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003748:	e00b      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fe fd55 	bl	80021f8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d902      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	74fb      	strb	r3, [r7, #19]
            break;
 8003760:	e006      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ec      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003784:	4903      	ldr	r1, [pc, #12]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378c:	e008      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	74bb      	strb	r3, [r7, #18]
 8003792:	e005      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4ba7      	ldr	r3, [pc, #668]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4aa6      	ldr	r2, [pc, #664]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037be:	4ba1      	ldr	r3, [pc, #644]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 0203 	bic.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	499d      	ldr	r1, [pc, #628]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e0:	4b98      	ldr	r3, [pc, #608]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 020c 	bic.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4995      	ldr	r1, [pc, #596]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003802:	4b90      	ldr	r3, [pc, #576]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	498c      	ldr	r1, [pc, #560]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003824:	4b87      	ldr	r3, [pc, #540]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	4984      	ldr	r1, [pc, #528]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003846:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	497b      	ldr	r1, [pc, #492]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003868:	4b76      	ldr	r3, [pc, #472]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	4973      	ldr	r1, [pc, #460]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800388a:	4b6e      	ldr	r3, [pc, #440]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	496a      	ldr	r1, [pc, #424]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038ac:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4962      	ldr	r1, [pc, #392]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ce:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	4959      	ldr	r1, [pc, #356]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038f0:	4b54      	ldr	r3, [pc, #336]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	4951      	ldr	r1, [pc, #324]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003912:	4b4c      	ldr	r3, [pc, #304]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4948      	ldr	r1, [pc, #288]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003930:	2b00      	cmp	r3, #0
 8003932:	d015      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003934:	4b43      	ldr	r3, [pc, #268]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4940      	ldr	r1, [pc, #256]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003952:	d105      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a3a      	ldr	r2, [pc, #232]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800396c:	4b35      	ldr	r3, [pc, #212]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	4932      	ldr	r1, [pc, #200]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398a:	d105      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003996:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039a4:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	4924      	ldr	r1, [pc, #144]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c2:	d105      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	4916      	ldr	r1, [pc, #88]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d019      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	4908      	ldr	r1, [pc, #32]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a32:	d109      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a02      	ldr	r2, [pc, #8]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d015      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a54:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4926      	ldr	r1, [pc, #152]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d105      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a74:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	4918      	ldr	r1, [pc, #96]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a12      	ldr	r2, [pc, #72]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d015      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ac4:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	490a      	ldr	r1, [pc, #40]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003af0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000

08003b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e09d      	b.n	8003c4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d009      	beq.n	8003b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
 8003b2a:	e005      	b.n	8003b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fbe4 	bl	8001320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b78:	d902      	bls.n	8003b80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e002      	b.n	8003b86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b8e:	d007      	beq.n	8003ba0 <HAL_SPI_Init+0xa0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	ea42 0103 	orr.w	r1, r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	0c1b      	lsrs	r3, r3, #16
 8003bfc:	f003 0204 	and.w	r2, r3, #4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c1c:	ea42 0103 	orr.w	r1, r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_SPI_Transmit_DMA+0x20>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0d8      	b.n	8003e2a <HAL_SPI_Transmit_DMA+0x1d2>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d002      	beq.n	8003c92 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c90:	e0c6      	b.n	8003e20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_SPI_Transmit_DMA+0x46>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ca2:	e0bd      	b.n	8003e20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cee:	d10f      	bne.n	8003d10 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	4a47      	ldr	r2, [pc, #284]	; (8003e34 <HAL_SPI_Transmit_DMA+0x1dc>)
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	4a46      	ldr	r2, [pc, #280]	; (8003e38 <HAL_SPI_Transmit_DMA+0x1e0>)
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d24:	4a45      	ldr	r2, [pc, #276]	; (8003e3c <HAL_SPI_Transmit_DMA+0x1e4>)
 8003d26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d3e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d48:	d82d      	bhi.n	8003da6 <HAL_SPI_Transmit_DMA+0x14e>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	d127      	bne.n	8003da6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d72:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	085b      	lsrs	r3, r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d82:	e010      	b.n	8003da6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d92:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	4619      	mov	r1, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003dbe:	f7fe fb36 	bl	800242e <HAL_DMA_Start_IT>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dcc:	f043 0210 	orr.w	r2, r3, #16
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003de0:	e01e      	b.n	8003e20 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d007      	beq.n	8003e00 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfe:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0220 	orr.w	r2, r2, #32
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0202 	orr.w	r2, r2, #2
 8003e1e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	08003f23 	.word	0x08003f23
 8003e38:	08003e7d 	.word	0x08003e7d
 8003e3c:	08003f3f 	.word	0x08003f3f

08003e40 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e8a:	f7fe f9b5 	bl	80021f8 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d03b      	beq.n	8003f16 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0220 	bic.w	r2, r2, #32
 8003eac:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0202 	bic.w	r2, r2, #2
 8003ebc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	2164      	movs	r1, #100	; 0x64
 8003ec2:	6978      	ldr	r0, [r7, #20]
 8003ec4:	f000 f97a 	bl	80041bc <SPI_EndRxTxTransaction>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2200      	movs	r2, #0
 8003efc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f7ff ffaa 	bl	8003e68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f14:	e002      	b.n	8003f1c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f7ff ff92 	bl	8003e40 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff ff8f 	bl	8003e54 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0203 	bic.w	r2, r2, #3
 8003f5a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	f043 0210 	orr.w	r2, r3, #16
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff ff79 	bl	8003e68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f90:	f7fe f932 	bl	80021f8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fa0:	f7fe f92a 	bl	80021f8 <HAL_GetTick>
 8003fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fa6:	4b39      	ldr	r3, [pc, #228]	; (800408c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	015b      	lsls	r3, r3, #5
 8003fac:	0d1b      	lsrs	r3, r3, #20
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb6:	e054      	b.n	8004062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d050      	beq.n	8004062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fc0:	f7fe f91a 	bl	80021f8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d902      	bls.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d13d      	bne.n	8004052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fee:	d111      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d004      	beq.n	8004004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004002:	d107      	bne.n	8004014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401c:	d10f      	bne.n	800403e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800403c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e017      	b.n	8004082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3b01      	subs	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d19b      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000000 	.word	0x20000000

08004090 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	; 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80040a2:	f7fe f8a9 	bl	80021f8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	4413      	add	r3, r2
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80040b2:	f7fe f8a1 	bl	80021f8 <HAL_GetTick>
 80040b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040c0:	4b3d      	ldr	r3, [pc, #244]	; (80041b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	00da      	lsls	r2, r3, #3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	0d1b      	lsrs	r3, r3, #20
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040d8:	e060      	b.n	800419c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040e0:	d107      	bne.n	80040f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d104      	bne.n	80040f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d050      	beq.n	800419c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040fa:	f7fe f87d 	bl	80021f8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004106:	429a      	cmp	r2, r3
 8004108:	d902      	bls.n	8004110 <SPI_WaitFifoStateUntilTimeout+0x80>
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	2b00      	cmp	r3, #0
 800410e:	d13d      	bne.n	800418c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800411e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004128:	d111      	bne.n	800414e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004132:	d004      	beq.n	800413e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d107      	bne.n	800414e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004156:	d10f      	bne.n	8004178 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004176:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e010      	b.n	80041ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	3b01      	subs	r3, #1
 800419a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d196      	bne.n	80040da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3728      	adds	r7, #40	; 0x28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000000 	.word	0x20000000

080041bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff ff5b 	bl	8004090 <SPI_WaitFifoStateUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	f043 0220 	orr.w	r2, r3, #32
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e027      	b.n	8004240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2200      	movs	r2, #0
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff fec0 	bl	8003f80 <SPI_WaitFlagStateUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420a:	f043 0220 	orr.w	r2, r3, #32
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e014      	b.n	8004240 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2200      	movs	r2, #0
 800421e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff ff34 	bl	8004090 <SPI_WaitFifoStateUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e000      	b.n	8004240 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e049      	b.n	80042ee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fd fde0 	bl	8001e34 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 fe88 	bl	8004f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <HAL_TIM_IC_Start+0x1a>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430e:	b2db      	uxtb	r3, r3
 8004310:	e023      	b.n	800435a <HAL_TIM_IC_Start+0x62>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d104      	bne.n	8004322 <HAL_TIM_IC_Start+0x2a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e01b      	b.n	800435a <HAL_TIM_IC_Start+0x62>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d104      	bne.n	8004332 <HAL_TIM_IC_Start+0x3a>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e013      	b.n	800435a <HAL_TIM_IC_Start+0x62>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b0c      	cmp	r3, #12
 8004336:	d104      	bne.n	8004342 <HAL_TIM_IC_Start+0x4a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	e00b      	b.n	800435a <HAL_TIM_IC_Start+0x62>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b10      	cmp	r3, #16
 8004346:	d104      	bne.n	8004352 <HAL_TIM_IC_Start+0x5a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e003      	b.n	800435a <HAL_TIM_IC_Start+0x62>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004358:	b2db      	uxtb	r3, r3
 800435a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <HAL_TIM_IC_Start+0x74>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e013      	b.n	8004394 <HAL_TIM_IC_Start+0x9c>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d104      	bne.n	800437c <HAL_TIM_IC_Start+0x84>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004378:	b2db      	uxtb	r3, r3
 800437a:	e00b      	b.n	8004394 <HAL_TIM_IC_Start+0x9c>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b08      	cmp	r3, #8
 8004380:	d104      	bne.n	800438c <HAL_TIM_IC_Start+0x94>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e003      	b.n	8004394 <HAL_TIM_IC_Start+0x9c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004392:	b2db      	uxtb	r3, r3
 8004394:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d102      	bne.n	80043a2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800439c:	7bbb      	ldrb	r3, [r7, #14]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e097      	b.n	80044d6 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_IC_Start+0xbe>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b4:	e023      	b.n	80043fe <HAL_TIM_IC_Start+0x106>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d104      	bne.n	80043c6 <HAL_TIM_IC_Start+0xce>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c4:	e01b      	b.n	80043fe <HAL_TIM_IC_Start+0x106>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d104      	bne.n	80043d6 <HAL_TIM_IC_Start+0xde>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d4:	e013      	b.n	80043fe <HAL_TIM_IC_Start+0x106>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_IC_Start+0xee>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e4:	e00b      	b.n	80043fe <HAL_TIM_IC_Start+0x106>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_IC_Start+0xfe>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f4:	e003      	b.n	80043fe <HAL_TIM_IC_Start+0x106>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <HAL_TIM_IC_Start+0x116>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440c:	e013      	b.n	8004436 <HAL_TIM_IC_Start+0x13e>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b04      	cmp	r3, #4
 8004412:	d104      	bne.n	800441e <HAL_TIM_IC_Start+0x126>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800441c:	e00b      	b.n	8004436 <HAL_TIM_IC_Start+0x13e>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d104      	bne.n	800442e <HAL_TIM_IC_Start+0x136>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800442c:	e003      	b.n	8004436 <HAL_TIM_IC_Start+0x13e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f001 f8d3 	bl	80055ea <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a25      	ldr	r2, [pc, #148]	; (80044e0 <HAL_TIM_IC_Start+0x1e8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d022      	beq.n	8004494 <HAL_TIM_IC_Start+0x19c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004456:	d01d      	beq.n	8004494 <HAL_TIM_IC_Start+0x19c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a21      	ldr	r2, [pc, #132]	; (80044e4 <HAL_TIM_IC_Start+0x1ec>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d018      	beq.n	8004494 <HAL_TIM_IC_Start+0x19c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a20      	ldr	r2, [pc, #128]	; (80044e8 <HAL_TIM_IC_Start+0x1f0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_TIM_IC_Start+0x19c>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <HAL_TIM_IC_Start+0x1f4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_TIM_IC_Start+0x19c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HAL_TIM_IC_Start+0x1f8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_TIM_IC_Start+0x19c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <HAL_TIM_IC_Start+0x1fc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_IC_Start+0x19c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1a      	ldr	r2, [pc, #104]	; (80044f8 <HAL_TIM_IC_Start+0x200>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d115      	bne.n	80044c0 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <HAL_TIM_IC_Start+0x204>)
 800449c:	4013      	ands	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d015      	beq.n	80044d2 <HAL_TIM_IC_Start+0x1da>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d011      	beq.n	80044d2 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0201 	orr.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	e008      	b.n	80044d2 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40012c00 	.word	0x40012c00
 80044e4:	40000400 	.word	0x40000400
 80044e8:	40000800 	.word	0x40000800
 80044ec:	40000c00 	.word	0x40000c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	40014000 	.word	0x40014000
 80044f8:	40015000 	.word	0x40015000
 80044fc:	00010007 	.word	0x00010007

08004500 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_TIM_IC_Start_IT+0x1e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e023      	b.n	8004566 <HAL_TIM_IC_Start_IT+0x66>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d104      	bne.n	800452e <HAL_TIM_IC_Start_IT+0x2e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800452a:	b2db      	uxtb	r3, r3
 800452c:	e01b      	b.n	8004566 <HAL_TIM_IC_Start_IT+0x66>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d104      	bne.n	800453e <HAL_TIM_IC_Start_IT+0x3e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453a:	b2db      	uxtb	r3, r3
 800453c:	e013      	b.n	8004566 <HAL_TIM_IC_Start_IT+0x66>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b0c      	cmp	r3, #12
 8004542:	d104      	bne.n	800454e <HAL_TIM_IC_Start_IT+0x4e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e00b      	b.n	8004566 <HAL_TIM_IC_Start_IT+0x66>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b10      	cmp	r3, #16
 8004552:	d104      	bne.n	800455e <HAL_TIM_IC_Start_IT+0x5e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800455a:	b2db      	uxtb	r3, r3
 800455c:	e003      	b.n	8004566 <HAL_TIM_IC_Start_IT+0x66>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004564:	b2db      	uxtb	r3, r3
 8004566:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d104      	bne.n	8004578 <HAL_TIM_IC_Start_IT+0x78>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e013      	b.n	80045a0 <HAL_TIM_IC_Start_IT+0xa0>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b04      	cmp	r3, #4
 800457c:	d104      	bne.n	8004588 <HAL_TIM_IC_Start_IT+0x88>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e00b      	b.n	80045a0 <HAL_TIM_IC_Start_IT+0xa0>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b08      	cmp	r3, #8
 800458c:	d104      	bne.n	8004598 <HAL_TIM_IC_Start_IT+0x98>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e003      	b.n	80045a0 <HAL_TIM_IC_Start_IT+0xa0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80045a2:	7bbb      	ldrb	r3, [r7, #14]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d102      	bne.n	80045ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80045a8:	7b7b      	ldrb	r3, [r7, #13]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d001      	beq.n	80045b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e0e2      	b.n	8004778 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_IC_Start_IT+0xc2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c0:	e023      	b.n	800460a <HAL_TIM_IC_Start_IT+0x10a>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_IC_Start_IT+0xd2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d0:	e01b      	b.n	800460a <HAL_TIM_IC_Start_IT+0x10a>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_IC_Start_IT+0xe2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e0:	e013      	b.n	800460a <HAL_TIM_IC_Start_IT+0x10a>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_IC_Start_IT+0xf2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045f0:	e00b      	b.n	800460a <HAL_TIM_IC_Start_IT+0x10a>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_IC_Start_IT+0x102>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004600:	e003      	b.n	800460a <HAL_TIM_IC_Start_IT+0x10a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2202      	movs	r2, #2
 8004606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <HAL_TIM_IC_Start_IT+0x11a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004618:	e013      	b.n	8004642 <HAL_TIM_IC_Start_IT+0x142>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d104      	bne.n	800462a <HAL_TIM_IC_Start_IT+0x12a>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004628:	e00b      	b.n	8004642 <HAL_TIM_IC_Start_IT+0x142>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d104      	bne.n	800463a <HAL_TIM_IC_Start_IT+0x13a>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004638:	e003      	b.n	8004642 <HAL_TIM_IC_Start_IT+0x142>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b0c      	cmp	r3, #12
 8004646:	d841      	bhi.n	80046cc <HAL_TIM_IC_Start_IT+0x1cc>
 8004648:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <HAL_TIM_IC_Start_IT+0x150>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004685 	.word	0x08004685
 8004654:	080046cd 	.word	0x080046cd
 8004658:	080046cd 	.word	0x080046cd
 800465c:	080046cd 	.word	0x080046cd
 8004660:	08004697 	.word	0x08004697
 8004664:	080046cd 	.word	0x080046cd
 8004668:	080046cd 	.word	0x080046cd
 800466c:	080046cd 	.word	0x080046cd
 8004670:	080046a9 	.word	0x080046a9
 8004674:	080046cd 	.word	0x080046cd
 8004678:	080046cd 	.word	0x080046cd
 800467c:	080046cd 	.word	0x080046cd
 8004680:	080046bb 	.word	0x080046bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0202 	orr.w	r2, r2, #2
 8004692:	60da      	str	r2, [r3, #12]
      break;
 8004694:	e01d      	b.n	80046d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0204 	orr.w	r2, r2, #4
 80046a4:	60da      	str	r2, [r3, #12]
      break;
 80046a6:	e014      	b.n	80046d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	60da      	str	r2, [r3, #12]
      break;
 80046b8:	e00b      	b.n	80046d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0210 	orr.w	r2, r2, #16
 80046c8:	60da      	str	r2, [r3, #12]
      break;
 80046ca:	e002      	b.n	80046d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      break;
 80046d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d14e      	bne.n	8004776 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2201      	movs	r2, #1
 80046de:	6839      	ldr	r1, [r7, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 ff82 	bl	80055ea <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a25      	ldr	r2, [pc, #148]	; (8004780 <HAL_TIM_IC_Start_IT+0x280>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d022      	beq.n	8004736 <HAL_TIM_IC_Start_IT+0x236>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f8:	d01d      	beq.n	8004736 <HAL_TIM_IC_Start_IT+0x236>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a21      	ldr	r2, [pc, #132]	; (8004784 <HAL_TIM_IC_Start_IT+0x284>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d018      	beq.n	8004736 <HAL_TIM_IC_Start_IT+0x236>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <HAL_TIM_IC_Start_IT+0x288>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_TIM_IC_Start_IT+0x236>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <HAL_TIM_IC_Start_IT+0x28c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00e      	beq.n	8004736 <HAL_TIM_IC_Start_IT+0x236>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_TIM_IC_Start_IT+0x290>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d009      	beq.n	8004736 <HAL_TIM_IC_Start_IT+0x236>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_TIM_IC_Start_IT+0x294>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_TIM_IC_Start_IT+0x236>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_TIM_IC_Start_IT+0x298>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d115      	bne.n	8004762 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	4b17      	ldr	r3, [pc, #92]	; (800479c <HAL_TIM_IC_Start_IT+0x29c>)
 800473e:	4013      	ands	r3, r2
 8004740:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b06      	cmp	r3, #6
 8004746:	d015      	beq.n	8004774 <HAL_TIM_IC_Start_IT+0x274>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474e:	d011      	beq.n	8004774 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	e008      	b.n	8004774 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e000      	b.n	8004776 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004774:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40013400 	.word	0x40013400
 8004794:	40014000 	.word	0x40014000
 8004798:	40015000 	.word	0x40015000
 800479c:	00010007 	.word	0x00010007

080047a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e097      	b.n	80048e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fd fa55 	bl	8001c78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80047e4:	f023 0307 	bic.w	r3, r3, #7
 80047e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f000 fbd1 	bl	8004f9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	4313      	orrs	r3, r2
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004840:	f023 030c 	bic.w	r3, r3, #12
 8004844:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800484c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004850:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	021b      	lsls	r3, r3, #8
 800485c:	4313      	orrs	r3, r2
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	011a      	lsls	r2, r3, #4
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	031b      	lsls	r3, r3, #12
 8004870:	4313      	orrs	r3, r2
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004886:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	4313      	orrs	r3, r2
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004904:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800490c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004914:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d110      	bne.n	800493e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d102      	bne.n	8004928 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004922:	7b7b      	ldrb	r3, [r7, #13]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d001      	beq.n	800492c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e069      	b.n	8004a00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493c:	e031      	b.n	80049a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b04      	cmp	r3, #4
 8004942:	d110      	bne.n	8004966 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004944:	7bbb      	ldrb	r3, [r7, #14]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d102      	bne.n	8004950 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800494a:	7b3b      	ldrb	r3, [r7, #12]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d001      	beq.n	8004954 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e055      	b.n	8004a00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004964:	e01d      	b.n	80049a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004966:	7bfb      	ldrb	r3, [r7, #15]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d108      	bne.n	800497e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800496c:	7bbb      	ldrb	r3, [r7, #14]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004972:	7b7b      	ldrb	r3, [r7, #13]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d102      	bne.n	800497e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004978:	7b3b      	ldrb	r3, [r7, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d001      	beq.n	8004982 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e03e      	b.n	8004a00 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_TIM_Encoder_Start+0xc4>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d008      	beq.n	80049c0 <HAL_TIM_Encoder_Start+0xd4>
 80049ae:	e00f      	b.n	80049d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2201      	movs	r2, #1
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fe16 	bl	80055ea <TIM_CCxChannelCmd>
      break;
 80049be:	e016      	b.n	80049ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2201      	movs	r2, #1
 80049c6:	2104      	movs	r1, #4
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fe0e 	bl	80055ea <TIM_CCxChannelCmd>
      break;
 80049ce:	e00e      	b.n	80049ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2201      	movs	r2, #1
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fe06 	bl	80055ea <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2201      	movs	r2, #1
 80049e4:	2104      	movs	r1, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fdff 	bl	80055ea <TIM_CCxChannelCmd>
      break;
 80049ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d122      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d11b      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0202 	mvn.w	r2, #2
 8004a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc f802 	bl	8000a54 <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa84 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fa8b 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d122      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0204 	mvn.w	r2, #4
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fb ffd8 	bl	8000a54 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa5a 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fa61 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d122      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d11b      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0208 	mvn.w	r2, #8
 8004adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fb ffae 	bl	8000a54 <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa30 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fa37 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d122      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d11b      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0210 	mvn.w	r2, #16
 8004b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2208      	movs	r2, #8
 8004b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fb ff84 	bl	8000a54 <HAL_TIM_IC_CaptureCallback>
 8004b4c:	e005      	b.n	8004b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fa06 	bl	8004f60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fa0d 	bl	8004f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d10e      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d107      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0201 	mvn.w	r2, #1
 8004b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9e0 	bl	8004f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b80      	cmp	r3, #128	; 0x80
 8004b98:	d10e      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d107      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fdde 	bl	8005774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d10e      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d107      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fdd1 	bl	8005788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d10e      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d107      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f9bb 	bl	8004f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d10e      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f06f 0220 	mvn.w	r2, #32
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fd91 	bl	8005760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4c:	d10f      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fd97 	bl	800579c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c7c:	d10f      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8c:	d107      	bne.n	8004c9e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fd89 	bl	80057b0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cac:	d10f      	bne.n	8004cce <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbc:	d107      	bne.n	8004cce <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fd7b 	bl	80057c4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cdc:	d10f      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cec:	d107      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fd6d 	bl	80057d8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e088      	b.n	8004e36 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d11b      	bne.n	8004d6a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6819      	ldr	r1, [r3, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f000 faa9 	bl	8005298 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699a      	ldr	r2, [r3, #24]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 020c 	bic.w	r2, r2, #12
 8004d54:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6999      	ldr	r1, [r3, #24]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	619a      	str	r2, [r3, #24]
 8004d68:	e060      	b.n	8004e2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d11c      	bne.n	8004daa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6819      	ldr	r1, [r3, #0]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f000 fb2d 	bl	80053de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d92:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6999      	ldr	r1, [r3, #24]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	021a      	lsls	r2, r3, #8
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	619a      	str	r2, [r3, #24]
 8004da8:	e040      	b.n	8004e2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f000 fb7a 	bl	80054b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 020c 	bic.w	r2, r2, #12
 8004dd2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69d9      	ldr	r1, [r3, #28]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	61da      	str	r2, [r3, #28]
 8004de6:	e021      	b.n	8004e2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d11c      	bne.n	8004e28 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6819      	ldr	r1, [r3, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f000 fb97 	bl	8005530 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69d9      	ldr	r1, [r3, #28]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	021a      	lsls	r2, r3, #8
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	61da      	str	r2, [r3, #28]
 8004e26:	e001      	b.n	8004e2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e031      	b.n	8004eba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f93f 	bl	80050ec <TIM_SlaveTimer_SetConfig>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e018      	b.n	8004eba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e96:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ea6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b0c      	cmp	r3, #12
 8004ed6:	d831      	bhi.n	8004f3c <HAL_TIM_ReadCapturedValue+0x78>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	08004f3d 	.word	0x08004f3d
 8004ee8:	08004f3d 	.word	0x08004f3d
 8004eec:	08004f3d 	.word	0x08004f3d
 8004ef0:	08004f1f 	.word	0x08004f1f
 8004ef4:	08004f3d 	.word	0x08004f3d
 8004ef8:	08004f3d 	.word	0x08004f3d
 8004efc:	08004f3d 	.word	0x08004f3d
 8004f00:	08004f29 	.word	0x08004f29
 8004f04:	08004f3d 	.word	0x08004f3d
 8004f08:	08004f3d 	.word	0x08004f3d
 8004f0c:	08004f3d 	.word	0x08004f3d
 8004f10:	08004f33 	.word	0x08004f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1a:	60fb      	str	r3, [r7, #12]

      break;
 8004f1c:	e00f      	b.n	8004f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	60fb      	str	r3, [r7, #12]

      break;
 8004f26:	e00a      	b.n	8004f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	60fb      	str	r3, [r7, #12]

      break;
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	60fb      	str	r3, [r7, #12]

      break;
 8004f3a:	e000      	b.n	8004f3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f3c:	bf00      	nop
  }

  return tmpreg;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a46      	ldr	r2, [pc, #280]	; (80050c8 <TIM_Base_SetConfig+0x12c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d017      	beq.n	8004fe4 <TIM_Base_SetConfig+0x48>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d013      	beq.n	8004fe4 <TIM_Base_SetConfig+0x48>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a43      	ldr	r2, [pc, #268]	; (80050cc <TIM_Base_SetConfig+0x130>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00f      	beq.n	8004fe4 <TIM_Base_SetConfig+0x48>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a42      	ldr	r2, [pc, #264]	; (80050d0 <TIM_Base_SetConfig+0x134>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <TIM_Base_SetConfig+0x48>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a41      	ldr	r2, [pc, #260]	; (80050d4 <TIM_Base_SetConfig+0x138>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_Base_SetConfig+0x48>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a40      	ldr	r2, [pc, #256]	; (80050d8 <TIM_Base_SetConfig+0x13c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_Base_SetConfig+0x48>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a3f      	ldr	r2, [pc, #252]	; (80050dc <TIM_Base_SetConfig+0x140>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d108      	bne.n	8004ff6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a33      	ldr	r2, [pc, #204]	; (80050c8 <TIM_Base_SetConfig+0x12c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d023      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005004:	d01f      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a30      	ldr	r2, [pc, #192]	; (80050cc <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01b      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2f      	ldr	r2, [pc, #188]	; (80050d0 <TIM_Base_SetConfig+0x134>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d017      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2e      	ldr	r2, [pc, #184]	; (80050d4 <TIM_Base_SetConfig+0x138>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2d      	ldr	r2, [pc, #180]	; (80050d8 <TIM_Base_SetConfig+0x13c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00f      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2d      	ldr	r2, [pc, #180]	; (80050e0 <TIM_Base_SetConfig+0x144>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00b      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <TIM_Base_SetConfig+0x148>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d007      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <TIM_Base_SetConfig+0x14c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_Base_SetConfig+0xaa>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a26      	ldr	r2, [pc, #152]	; (80050dc <TIM_Base_SetConfig+0x140>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d108      	bne.n	8005058 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4313      	orrs	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <TIM_Base_SetConfig+0x12c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <TIM_Base_SetConfig+0x110>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a14      	ldr	r2, [pc, #80]	; (80050d8 <TIM_Base_SetConfig+0x13c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00f      	beq.n	80050ac <TIM_Base_SetConfig+0x110>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a14      	ldr	r2, [pc, #80]	; (80050e0 <TIM_Base_SetConfig+0x144>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_Base_SetConfig+0x110>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <TIM_Base_SetConfig+0x148>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_Base_SetConfig+0x110>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <TIM_Base_SetConfig+0x14c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_Base_SetConfig+0x110>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <TIM_Base_SetConfig+0x140>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d103      	bne.n	80050b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	615a      	str	r2, [r3, #20]
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40012c00 	.word	0x40012c00
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40013400 	.word	0x40013400
 80050dc:	40015000 	.word	0x40015000
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800

080050ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511e:	f023 0307 	bic.w	r3, r3, #7
 8005122:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4a52      	ldr	r2, [pc, #328]	; (8005284 <TIM_SlaveTimer_SetConfig+0x198>)
 800513c:	4293      	cmp	r3, r2
 800513e:	f000 809a 	beq.w	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 8005142:	4a50      	ldr	r2, [pc, #320]	; (8005284 <TIM_SlaveTimer_SetConfig+0x198>)
 8005144:	4293      	cmp	r3, r2
 8005146:	f200 8093 	bhi.w	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 800514a:	4a4f      	ldr	r2, [pc, #316]	; (8005288 <TIM_SlaveTimer_SetConfig+0x19c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	f000 8092 	beq.w	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 8005152:	4a4d      	ldr	r2, [pc, #308]	; (8005288 <TIM_SlaveTimer_SetConfig+0x19c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	f200 808b 	bhi.w	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 800515a:	4a4c      	ldr	r2, [pc, #304]	; (800528c <TIM_SlaveTimer_SetConfig+0x1a0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	f000 808a 	beq.w	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 8005162:	4a4a      	ldr	r2, [pc, #296]	; (800528c <TIM_SlaveTimer_SetConfig+0x1a0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	f200 8083 	bhi.w	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 800516a:	4a49      	ldr	r2, [pc, #292]	; (8005290 <TIM_SlaveTimer_SetConfig+0x1a4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	f000 8082 	beq.w	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 8005172:	4a47      	ldr	r2, [pc, #284]	; (8005290 <TIM_SlaveTimer_SetConfig+0x1a4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d87b      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 8005178:	4a46      	ldr	r2, [pc, #280]	; (8005294 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d07b      	beq.n	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 800517e:	4a45      	ldr	r2, [pc, #276]	; (8005294 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d875      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 8005184:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005188:	d075      	beq.n	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 800518a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800518e:	d86f      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 8005190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005194:	d06f      	beq.n	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 8005196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519a:	d869      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 800519c:	2b70      	cmp	r3, #112	; 0x70
 800519e:	d01a      	beq.n	80051d6 <TIM_SlaveTimer_SetConfig+0xea>
 80051a0:	2b70      	cmp	r3, #112	; 0x70
 80051a2:	d865      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 80051a4:	2b60      	cmp	r3, #96	; 0x60
 80051a6:	d059      	beq.n	800525c <TIM_SlaveTimer_SetConfig+0x170>
 80051a8:	2b60      	cmp	r3, #96	; 0x60
 80051aa:	d861      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 80051ac:	2b50      	cmp	r3, #80	; 0x50
 80051ae:	d04b      	beq.n	8005248 <TIM_SlaveTimer_SetConfig+0x15c>
 80051b0:	2b50      	cmp	r3, #80	; 0x50
 80051b2:	d85d      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 80051b4:	2b40      	cmp	r3, #64	; 0x40
 80051b6:	d019      	beq.n	80051ec <TIM_SlaveTimer_SetConfig+0x100>
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d859      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 80051bc:	2b30      	cmp	r3, #48	; 0x30
 80051be:	d05a      	beq.n	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 80051c0:	2b30      	cmp	r3, #48	; 0x30
 80051c2:	d855      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d056      	beq.n	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d851      	bhi.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d052      	beq.n	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	d050      	beq.n	8005276 <TIM_SlaveTimer_SetConfig+0x18a>
 80051d4:	e04c      	b.n	8005270 <TIM_SlaveTimer_SetConfig+0x184>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f000 f9e0 	bl	80055aa <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80051ea:	e045      	b.n	8005278 <TIM_SlaveTimer_SetConfig+0x18c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b05      	cmp	r3, #5
 80051f2:	d004      	beq.n	80051fe <TIM_SlaveTimer_SetConfig+0x112>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80051f8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80051fc:	d101      	bne.n	8005202 <TIM_SlaveTimer_SetConfig+0x116>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e03b      	b.n	800527a <TIM_SlaveTimer_SetConfig+0x18e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a1a      	ldr	r2, [r3, #32]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005228:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	621a      	str	r2, [r3, #32]
      break;
 8005246:	e017      	b.n	8005278 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6899      	ldr	r1, [r3, #8]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	461a      	mov	r2, r3
 8005256:	f000 f893 	bl	8005380 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800525a:	e00d      	b.n	8005278 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6899      	ldr	r1, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	461a      	mov	r2, r3
 800526a:	f000 f8f5 	bl	8005458 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800526e:	e003      	b.n	8005278 <TIM_SlaveTimer_SetConfig+0x18c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	75fb      	strb	r3, [r7, #23]
      break;
 8005274:	e000      	b.n	8005278 <TIM_SlaveTimer_SetConfig+0x18c>
      break;
 8005276:	bf00      	nop
  }

  return status;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	00100070 	.word	0x00100070
 8005288:	00100050 	.word	0x00100050
 800528c:	00100040 	.word	0x00100040
 8005290:	00100030 	.word	0x00100030
 8005294:	00100020 	.word	0x00100020

08005298 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4a28      	ldr	r2, [pc, #160]	; (8005364 <TIM_TI1_SetConfig+0xcc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01b      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d017      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <TIM_TI1_SetConfig+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a24      	ldr	r2, [pc, #144]	; (800536c <TIM_TI1_SetConfig+0xd4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00f      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a23      	ldr	r2, [pc, #140]	; (8005370 <TIM_TI1_SetConfig+0xd8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00b      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <TIM_TI1_SetConfig+0xdc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a21      	ldr	r2, [pc, #132]	; (8005378 <TIM_TI1_SetConfig+0xe0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_TI1_SetConfig+0x66>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a20      	ldr	r2, [pc, #128]	; (800537c <TIM_TI1_SetConfig+0xe4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <TIM_TI1_SetConfig+0x6a>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <TIM_TI1_SetConfig+0x6c>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0303 	bic.w	r3, r3, #3
 800530e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e003      	b.n	8005322 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	b2db      	uxtb	r3, r3
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f023 030a 	bic.w	r3, r3, #10
 800533c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 030a 	and.w	r3, r3, #10
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40013400 	.word	0x40013400
 8005378:	40014000 	.word	0x40014000
 800537c:	40015000 	.word	0x40015000

08005380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f023 0210 	bic.w	r2, r3, #16
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800541c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	031b      	lsls	r3, r3, #12
 8005422:	b29b      	uxth	r3, r3
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005430:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	621a      	str	r2, [r3, #32]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 0210 	bic.w	r2, r3, #16
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	031b      	lsls	r3, r3, #12
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	621a      	str	r2, [r3, #32]
}
 80054ac:	bf00      	nop
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 0303 	bic.w	r3, r3, #3
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	031b      	lsls	r3, r3, #12
 8005574:	b29b      	uxth	r3, r3
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	031b      	lsls	r3, r3, #12
 8005588:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	021a      	lsls	r2, r3, #8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	609a      	str	r2, [r3, #8]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	2201      	movs	r2, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1a      	ldr	r2, [r3, #32]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	43db      	mvns	r3, r3
 800560c:	401a      	ands	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1a      	ldr	r2, [r3, #32]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	fa01 f303 	lsl.w	r3, r1, r3
 8005622:	431a      	orrs	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005648:	2302      	movs	r3, #2
 800564a:	e074      	b.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a34      	ldr	r2, [pc, #208]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a33      	ldr	r2, [pc, #204]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a31      	ldr	r2, [pc, #196]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005690:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a21      	ldr	r2, [pc, #132]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d022      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d01d      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1f      	ldr	r2, [pc, #124]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d018      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1c      	ldr	r2, [pc, #112]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a15      	ldr	r2, [pc, #84]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a11      	ldr	r2, [pc, #68]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d10c      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40015000 	.word	0x40015000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40014000 	.word	0x40014000

08005760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	b29b      	uxth	r3, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	b29b      	uxth	r3, r3
 800580a:	4013      	ands	r3, r2
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005822:	b084      	sub	sp, #16
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	f107 0014 	add.w	r0, r7, #20
 8005830:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	b004      	add	sp, #16
 8005862:	4770      	bx	lr

08005864 <__libc_init_array>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	4d0d      	ldr	r5, [pc, #52]	; (800589c <__libc_init_array+0x38>)
 8005868:	4c0d      	ldr	r4, [pc, #52]	; (80058a0 <__libc_init_array+0x3c>)
 800586a:	1b64      	subs	r4, r4, r5
 800586c:	10a4      	asrs	r4, r4, #2
 800586e:	2600      	movs	r6, #0
 8005870:	42a6      	cmp	r6, r4
 8005872:	d109      	bne.n	8005888 <__libc_init_array+0x24>
 8005874:	4d0b      	ldr	r5, [pc, #44]	; (80058a4 <__libc_init_array+0x40>)
 8005876:	4c0c      	ldr	r4, [pc, #48]	; (80058a8 <__libc_init_array+0x44>)
 8005878:	f000 f820 	bl	80058bc <_init>
 800587c:	1b64      	subs	r4, r4, r5
 800587e:	10a4      	asrs	r4, r4, #2
 8005880:	2600      	movs	r6, #0
 8005882:	42a6      	cmp	r6, r4
 8005884:	d105      	bne.n	8005892 <__libc_init_array+0x2e>
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	f855 3b04 	ldr.w	r3, [r5], #4
 800588c:	4798      	blx	r3
 800588e:	3601      	adds	r6, #1
 8005890:	e7ee      	b.n	8005870 <__libc_init_array+0xc>
 8005892:	f855 3b04 	ldr.w	r3, [r5], #4
 8005896:	4798      	blx	r3
 8005898:	3601      	adds	r6, #1
 800589a:	e7f2      	b.n	8005882 <__libc_init_array+0x1e>
 800589c:	080058e4 	.word	0x080058e4
 80058a0:	080058e4 	.word	0x080058e4
 80058a4:	080058e4 	.word	0x080058e4
 80058a8:	080058e8 	.word	0x080058e8

080058ac <memset>:
 80058ac:	4402      	add	r2, r0
 80058ae:	4603      	mov	r3, r0
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d100      	bne.n	80058b6 <memset+0xa>
 80058b4:	4770      	bx	lr
 80058b6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ba:	e7f9      	b.n	80058b0 <memset+0x4>

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
